Повторное использование кода


Повторное использование кода - очень важная часть программирования на любом языке. Увеличение размера кода усложняет его обслуживание.
Чтобы крупный программный проект был успешным, важно соблюдать принцип "Не повторяйся" или "СУХОЙ". Мы уже рассмотрели один из способов сделать это: с помощью циклов. В этом модуле мы рассмотрим еще два: функции и модули.
Говорят, что плохой, повторяющийся код подчиняется принципу WET, который означает "Пиши все дважды, или нам нравится печатать".


Вы уже использовали функции в предыдущих уроках.
Любой оператор, состоящий из слова, за которым следует информация в круглых скобках, является вызовом функции.
Вот несколько примеров, которые вы уже видели:
print("Hello world!")
range(2, 20)
str(12)
range(10, 20, 3)
Слова перед круглыми скобками являются именами функций, а разделенные запятыми значения внутри круглых скобок являются аргументами функции.

Функции
В дополнение к использованию предопределенных функций, вы можете создавать свои собственные функции с помощью инструкции def.
Вот пример функции с именем my_func. Он не принимает никаких аргументов и трижды выводит "спам". Он определяется, а затем вызывается. Инструкции в функции выполняются только при вызове функции.

Аргументы
Все определения функций, которые мы рассмотрели до сих пор, были функциями с нулевыми аргументами, которые вызываются с пустыми круглыми скобками.
Однако большинство функций принимают аргументы.
Приведенный ниже пример определяет функцию, которая принимает один аргумент:

def print_with_exclamation(word):
   print(word + "!")

print_with_exclamation("spam")
print_with_exclamation("eggs")
print_with_exclamation("python")

Вы также можете определять функции с более чем одним аргументом; разделяйте их запятыми.

Аргументы функции могут использоваться в качестве переменных внутри определения функции. Однако на них нельзя ссылаться вне определения функции. Это также относится к другим переменным, созданным внутри функции.
def function(variable):
    variable += 1
    print(variable)

function(7)
print(variable)

Этот код выдаст ошибку, поскольку переменная определена внутри функции и на нее можно ссылаться только там.
Технически параметры - это переменные в определении функции, а аргументы - это значения, вводимые в параметры при вызове функций.

Возврат из функций

Некоторые функции, такие как int или str, возвращают значение, которое может быть использовано позже.
Чтобы сделать это для определенных вами функций, вы можете использовать оператор return.

def max(x, y):
    if x >=y:
        return x
    else:
        return y

print(max(4, 7))
z = max(8, 5)
print(z)

Оператор return не может использоваться вне определения функции.
Как только вы возвращаете значение из функции, оно немедленно прекращает выполняться. Любой код после оператора return никогда не будет выполнен.
Например:
def add_numbers(x, y):
    total = x + y
    return total
    print("This won't be printed")

print(add_numbers(4, 5))

Комментарии

Комментарии - это аннотации к коду, используемые для облегчения его понимания. Они не влияют на то, как выполняется код.
В Python комментарий создается путем вставки восьмиугольника (иначе известного как знак числа или хэш-символ: #). Весь текст после него в этой строке игнорируется.
Например:

x = 365
y = 7
# this is a comment

print(x % y) # find the remainder
# print (x // y)
# another comment

Документы

Docstrings (строки документации) служат той же цели, что и комментарии, поскольку они предназначены для объяснения кода. Однако они более специфичны и имеют другой синтаксис. Они создаются путем помещения многострочной строки, содержащей объяснение функции, под первой строкой функции

def shout(word):
    """
    Print a word with an
    exclamation mark following it.
    """
    print(word + "!")

shout("spam")

В отличие от обычных комментариев, строки документов сохраняются на протяжении всего времени выполнения программы. Это позволяет программисту проверять эти комментарии во время выполнения.

Функции

Хотя они создаются иначе, чем обычные переменные, функции такие же, как и любой другой вид значений.
Они могут быть назначены и переназначены переменным, а затем ссылаться на эти имена.

def multiply(x, y):
    return x * y

a = 4
b = 7
operation = multiply
print(operation(a, b))

В приведенном выше примере функция multiply была назначена операции с переменной. Теперь операция name также может быть использована для вызова функции.
def add(x, y):
    return x + y
def do_twice(func, x, y):
    return func(func(x, y), func(x, y))
a = 5
b = 10
print(do_twice(add, a, b))

Модули


Модули - это фрагменты кода, написанные другими людьми для выполнения общих задач, таких как генерация случайных чисел, выполнение математических операций и т.д.

Основной способ использования модуля - добавить import module_name в начало вашего кода, а затем использовать module_name.var для доступа к функциям и значениям с именем var в модуле.
Например, в следующем примере используется модуль random для генерации случайных чисел:

Код использует функцию randint, определенную в модуле random, для печати 5 случайных чисел в диапазоне от 1 до 6.

Существует другой вид импорта, который можно использовать, если вам нужны только определенные функции из модуля.
Они принимают форму из module_name import var, а затем var можно использовать так, как если бы он был определен обычно в вашем коде.
Например, чтобы импортировать только константу pi из математического модуля:

from math import pi
print(pi)

Используйте список, разделенный запятыми, для импорта нескольких объектов. Например:
from math import pi, sqrt

* импортирует все объекты из модуля. Например: из математического импорта *
Обычно это не рекомендуется, поскольку это путает переменные в вашем коде с переменными во внешнем модуле.

Вы можете импортировать модуль или объект под другим именем, используя ключевое слово as. Это в основном используется, когда модуль или объект имеет длинное или запутанное имя.
Например:
from math import sqrt as square_root
print(square_root(100))


Модули

В Python существует три основных типа модулей: те, которые вы пишете сами, те, которые вы устанавливаете из внешних источников, и те, которые предварительно установлены с помощью Python.
Последний тип называется стандартной библиотекой и содержит множество полезных модулей. Некоторые из полезных модулей стандартной библиотеки включают string, re, datetime, math, random, os, multiprocessing, subprocess, socket, email, json, doctest, unittest, pdb, argparse и system.

Задачи, которые могут быть выполнены стандартной библиотекой, включают синтаксический анализ строк, сериализацию данных, тестирование, отладку и манипулирование датами, электронными письмами, аргументами командной строки и многое другое!

Стандартная библиотека
Некоторые модули в стандартной библиотеке написаны на Python, а некоторые - на C.
Большинство из них доступны на всех платформах, но некоторые специфичны для Windows или Unix.



