18.1 Booleans
Another type in Python is the Boolean type. There are two Boolean values: True and False.
They can be created by comparing values, for instance by using the equal operator ==.

my_boolean = True
print(my_boolean) //true
print(2 == 3) //false
print("hello" == "hello") //true

Another comparison operator, the not equal operator (!=), evaluates to True if the items being compared aren't equal, and False if they are.
print(1 != 1)               //false
print("eleven" != "seven")  //true
print(2 != 10)              //true

Comparison operators are also called Relational operators.
Python also has operators that determine whether one number (float or integer) is greater than or smaller than another. These operators are > and < respectively.

Сравнение
Операторы "больше" или "равно" и "меньше" или "равно" - это >= и <=.
Они такие же, как строгие операторы больше, чем и меньше, чем, за исключением того, что они возвращают значение True при сравнении равных чисел.
print(7 <= 8) //true
print(9 >= 9.0) //true\

Операторы Больше и меньше, чем также могут использоваться для лексикографического сравнения
строк (алфавитный порядок слов основан на алфавитном порядке составляющих их букв).
Например:
print("Annie" > "Andy") //true
Сравниваются первые два персонажа из "Энни" и "Энди" (А и А). Поскольку они равны, сравниваются вторые два символа.
 Поскольку они также равны, сравниваются два третьих символа (n и d).
И поскольку n имеет большее значение алфавитного порядка, чем d, "Энни" больше, чем "Энди".

19.1 Конструкции IF
Вы можете использовать инструкции if для запуска кода, если выполняется определенное условие.
Если выражение принимает значение True, выполняются некоторые инструкции. В противном случае они не выполняются.
Оператор if выглядит следующим образом:
if expression:
   statements
Python использует отступ (пробел в начале строки) для разграничения блоков кода.
В зависимости от логики программы отступ может быть обязательным.
Как вы можете видеть, операторы в if должны быть с отступом.

20.1 конструкции else
Оператор if позволяет вам проверить условие и выполнить некоторые инструкции, если условие истинно.
Оператор else может использоваться для выполнения некоторых инструкций, когда условие оператора if равно False.

Как и в случае с операторами if, код внутри блока должен иметь отступ.
x = 4
if x == 5:
    print("Yes")
else:
    print("No")

В каждом блоке условий if может быть только один оператор else.
Чтобы сделать несколько проверок, вы можете связать операторы if и else.
Например, следующая программа проверяет и выводит значение переменной num в виде текста:
num = 3
if num == 1:
    print("One")
else:
    if num == 2:
        print("Two")
    else:
        if num == 3:
            print("Three")  //Three
        else:
            print("Something else")

Множественные операторы if/else делают код длинным и не очень читаемым.
Оператор elif (сокращение от else if) - это ярлык для использования при объединении в цепочку операторов if и else, что сокращает код.

Тот же пример из предыдущей части может быть переписан с использованием операторов elif:
num = 3
if num == 1:
    print("One")
elif num == 2:
    print("Two")
elif num == 3:
    print("Three")
else:
    print("Something else")


21.1 Логика Boolean

Булева логика используется для создания более сложных условий для операторов if, которые полагаются на более чем одно условие.
Логическими операторами Python являются and, or и not.
Оператор and принимает два аргумента и вычисляется как True тогда и только тогда, когда оба его аргумента истинны. В противном случае он оценивается как False.

print(1 == 1 and 2 == 2)
True
print(1 == 1 and 2 == 3)
False
print(1 != 1 and 2 == 2)
False
print(2 < 1 and 3 > 6)
False

В отличие от других операторов, которые мы видели до сих пор, он не только принимает один аргумент, но и инвертирует его.
Результат not True равен False, а not False переходит в True

print(not 1 == 1) //False
print(not 1 > 7)//True

22.1 Несколько Операторов и условий
Приоритет оператора - очень важная концепция в программировании.
Это расширение математической идеи порядка операций (умножение выполняется перед сложением и т.д.), включающее другие операторы, например, в булевой логике.
Приведенный ниже код показывает, что == имеет более высокий приоритет, чем или
print(False == False or True)
True
print(False == (False or True))
False
print((False == False) or True)
True

23.1 Списки(List)
Списки используются для хранения элементов.
Список создается с использованием квадратных скобок с разделяющими элементы запятыми.
words = ["Hello", "world", "!"]
В приведенном выше примере список слов содержит три строковых элемента.
К определенному элементу в списке можно получить доступ, используя его индекс в квадратных скобках.
Например:

words = ["Hello", "world", "!"]
print(words[0])
print(words[1])
print(words[2])

Иногда вам нужно создать пустой список и заполнить его позже во время работы программы.
Например, если вы создаете программу управления очередями, вначале очередь будет пустой,
а позже будет заполнена данными о пользователях.
empty_list = []
print(empty_list)

Как правило, список будет содержать элементы одного типа, но также возможно включить несколько разных типов.
Списки также могут быть вложены в другие списки.

number = 3
things = ["string", 0, [1, 2, number], 4.56]
print(things[1])
print(things[2])
print(things[2][2])

0
[1, 2, 3]
3

Вложенные списки можно использовать для представления 2D-сеток, таких как матрицы.
Например:
m = [
    [1,2,3],
    [4,5,6]
    ]

print(m[1][2])  //6

Некоторые типы, такие как строки, могут быть проиндексированы подобно спискам.
Индексирование строк ведет себя так, как если бы вы индексировали список, содержащий каждый символ в строке.
str = "Hello world!"
print(str[6]) //w