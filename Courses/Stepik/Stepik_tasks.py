# coding=utf8

# letters = ["a", "b", "c"]
# letters.append("d")
# print(len(letters))
# print(letters)
#
# nums = [1, 2, 3]
# nums.append(4)
# print(nums)

# nums = [9, 8, 7, 6, 5]
# nums.append(4)
# nums.insert(2, 11)
# print(len(nums))
# print(nums)



# passwd = "jopa"
# conf = "jopa"
# if passwd == conf:
#     print("Пароль принят")
# else:
#     print("Пароль не принят")


# n = 7911
# n1 = (n//1000)
# n2 = (n//100%10)
# n3 = (n//10%10)
# n4 = (n%10)
# if n1 + n4 == n2 - n3:
#     print("ДА")
# else:
#     print("НЕТ")

# age = int(input())
# if age >= 18:
#     print("Доступ разрешен")
# else:
#     print("Доступ запрещен")

# a = int(input())
# b = int(input())
# c = int(input())
# step = b - a
# if step + b == c:
#     print("YES")
# else:
#     print("NO")

# a = int(input())
# b = int(input())
# if a < b:
#     print(a)
# else:
#     print(b)

# херня не работает
# a = [10,9,11,12]
# a = []
# i = 0
# while i<4:
#     a.append(input())
#     i = i + 1
# print(min(a))

# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
# n1, n2 = 0, 0
# if a < b:
#     n1 = a
# else:
#     n1 = b
# if c < d:
#     n2 = c
# else:
#     n2 = d
#
# if n1 < n2 :
#     print(n1)
# else:
#     print(n2)

# до 13 включительно – детство;
# от 14 до 24 – молодость;
# от 25 до 59 – зрелость;
# от 60 – старость.
#
# age =60
# if age<=13:
#     print("детство")
# elif age >=14 and age <=24:
#     print("молодость")
# elif age >=25 and age <=59:
#     print("зрелость")
# elif age >= 60:
#     print("старость")


# a = 4
# b =-22
# c = 1
# sum = 0
# if a>=0:
#     sum = sum + a
# if b>=0:
#     sum =sum + b
# if c>=0:
#     sum = sum + c
# print(sum)

# a, b = int(input()), int(input())
# if a > b:
#     print("NO")
# elif a < b:
#     print("YES")
# else:
#     print("Don't know")

# a = -44
# if a <= -3 or a >= 7:
#     print('Принадлежит')
# else:
#     print('Не принадлежит')

# a = -10
# if  a > -30 and a <= -2 or a > 7 and a <= 25 :
#     print('Принадлежит')
# else:
#     print('Не принадлежит')

# x = 1045
# if (x>=1000 and x<=9999):
#     if x%7 == 0 or x%17 == 0:
#
#         print("YES")
#     else:
#         print("NO")
# else:
#     print("NO")


# a, b, c, = int(input()),int(input()),int(input())
# a, b, c, = 3, 4, 6
#
# if a<b+c and b<c+a and c < a +b:
#     print("YES")
# else:
#     print("NO")

# x=2012
# if (x%4==0 and x%100 !=0) or x%400==0:
#     print("YES")
# else:
#     print("NO")

# x1 = int(input("x1= "))
# y1 = int(input("y1= "))
# x2 = int(input("x2= "))
# y2 = int(input("y2= "))
# x = x2 - x1  # разность координат по оси x
# y = y2 - y1  # разность координат по оси y
# if x1==x2 or y1==y2:
#     print('YES')
# else:
#     print('NO')


# x1 = int(input("x1= "))
# y1 = int(input("y1= "))
# x2 = int(input("x2= "))
# y2 = int(input("y2= "))
# x = x2 - x1  # разность координат по оси x
# y = y2 - y1  # разность координат по оси y
# if -1<=x<=1 and -1<=y<=1:
#     print('YES')
# else:
#     print('NO')

# list = [2, 3, 4, 5, 6, 7]
#
# for x in list:
#     if(x%2==1 and x>4):
#         print(x)
#         break

# a,b,c = int(input()),int(input()),int(input())
# if a == b and b == c:
#     print("Равносторонний")
# elif a == b or b == c or c == a:создание номенклатуры в 1с по прототипу
#     print("Равнобедренный")
# else:
#     print("разносторонний")

# a,b,c = int(input()),int(input()),int(input())
# if a<b<c and a<c:

# x = int(input())
# lst1 = [1,3,5,7,8,10,12]
# lst2 = [4,6,9,11]
# if x in lst1:
#     print(31)
# elif x in lst2:
#     print(30)
# else:
#     print(28)

# x = int(input())
# if 60 > x :
#     print("Легкий вес")
# if 60 <= x < 64:
#     print("Первый полусредний вес")
# if 64 <= x < 69:
#     print("Полусредний вес")


# a = 25
# b = 5
# c = "*"
#
# if b==0 and c == "/":
#     print("На ноль делить нельзя!")
# elif c == "/" and b!=0 :
#     print(a/b)
# elif c == "*":
#     print(a*b)
# elif c == "+":
#     print(a+b)
# elif c == "-":
#     print(a-b)
# else:
#     print("Неверная операция")

#
# c1 = "желтый"
# c2 = "красный"
#
# if (c1 == "красный" and c2 == "синий") or (c2 == "красный" and c1 == "синий"):
#     print("фиолетовый")
# elif (c1 == "красный" and c2 == "желтый") or (c2 == "красный" and c1 == "желтый"):
#     print("оранжевый")
# elif (c1 == "синий" and c2 == "желтый") or (c2 == "синий" and c1 == "желтый"):
#     print("зеленый")
# elif (c1 == "синий" and c2 == "синий"):
#     print("синий")
# elif (c1 == "желтый" and c2 == "желтый"):
#     print("желтый")
# elif (c1 == "красный" and c2 == "красный"):
#     print("красный")
# else:
#     print("ошибка цвета")

# c = 36
#
# if c in range(0,37):
#     if c == 0:
#         print("зеленый")
#     elif  1 <= c <= 10:
#         if c%2!=0:
#             print("красный")
#         else:
#             print("черный")
#     elif  11 <= c <= 18:
#         if c%2!=0:
#             print("черный")
#         else:
#             print("красный")
#     elif  19 <= c <= 28:
#         if c%2!=0:
#             print("красный")
#         else:
#             print("черный")
#     elif  29 <= c <= 36:
#         if c%2!=0:
#             print("черный")
#         else:
#             print("красный")
# else:
#     print("ошибка ввода")


# a1 = 1
# b1 = 3
# a2 = 2
# b2 = 4
# if (a1 < a2 and b1 < b2) or (a1 > a2 and b1 > b2) or (a1 > a2 and b2 < b1) or (a1 > a2 and b2 > b1):
#     print("пустое множество")
# elif (a1 < a2 and b1 < b2):
#     print(a2,b1)
# elif (a1 > a2 and b1 > b2):
#     print(a1,b2)
# elif (a1 < a2 and a2 == b2):
#     print(b1,a2)
# elif (a2 < a1 and a1 == b2):
#     print(b2,a1)
# elif a1 == a2 and b1 == b2:
#     print(a1,b1)
# elif a1 == a2 and b1 < b2:
#     print(a1)
# elif a1 > a2 and b2==b1
#     print(b1)

# if a2 > b1 or a1 > b2:
#     print('пустое множество')
# elif a1 == b2:
#     print(a1)
# elif a2 == b1:
#     print(a2)
# else:
#     if a1 > a2:
#         a2 = a1
#     if b1 < b2:
#         b2 = b1
#     print(a2, b2)

# c = int(input())
#
# if c%100==0:
#     print("YES")
# else:
#     print("NO")

# x1 = 1
# x2 = 1
# y1 = 2
# y2 = 6
# if (x1+x2+y1+y2)%2==0:
#     print("YES")
# else:
#     print("NO")

# a =int(input())
# s = str(input())
# if 10<=a<=15 and s =="f":
#     print("YES")
# else:
#     print("NO")

# c = 2
# # c = int(input())
# if c % 2 != 0:
#     print("YES")
# elif c % 2 == 0 and 2 <= c <= 5:
#     print("NO")
# elif c % 2 == 0 and 6 <= c <= 20:
#     print("YES")
# elif c % 2 == 0 and c > 20:
#     print("NO")

# x1 = 4
# x2 = 4
# y1 = 5
# y2 = 5

# if (x1-y1)==(x2-y2) or (x1+y1)==(x2+y2):
#     print("YES")
# else:
#     print("NO")


#
# if (abs(x1-x2)==1 and abs(y1-y2)==2) or (abs(x1-x2)==2 and abs(y1-y2)==1):
#     print("YES")
# else:
#     print("NO")

#
# def shout(word):
#    return word + "!"
# speak = shout
# output = speak("shout")
# print(output)

# def add(x, y):
#     return x + y
# def do_twice(func, x, y):
#     return func(func(x, y), func(x, y))
# a = 5
# b = 10
# print(do_twice(add, a, b))
#
# def func(x):
#   res = 0
#   for i in range(x):
#      res += i
#   return res
# print(func(4))


# a = 5
# b = 8
# c = 3
#
# x = [a,b,c]
# x = sorted(x,reverse=True)
# for i in range(len(x)):
#     print(x[i])



# n = "945"
# m = [num for num in n]
#
# minimal = min(m)
# maximal = max(m)
#
# s = sorted(m)
# srednee = (s[1])
# raz = int(maximal) - int(minimal)
# print(f"максимальное минус минимальное = {raz}")
# print(f"среднее = {srednee}")
# if int(raz) == int(srednee):
#     print("Пизда как интересно")
# else:
#     print("Пизда как не интересно")


# sum = 0
# a = [5.4,33,-1232,-3.889,6]
# for i in range(len(a)):
#     sum =+ abs(float(a[i]))
# print(sum)

# try:
#   num1 = input(":")
#   num2 = input(":")
#   print(float(num1)/float(num2))
# except():

# file = open("5_Exceptions & Files/Notes", encoding='utf-8', mode='a')
# cont = file.write("jopahuipizda")
# file = open("5_Exceptions & Files/Notes", encoding='utf-8', mode='r')
# cont1 = file.read(-1)
# print(cont1)
# file.close()

# p1, p2, q1, q2 = 10, 15, 21, 13
# print(int(abs(p1-q1)+abs(p2-q2)))
#
# str1 = '1'
# str2 = str1 + '2' + str1
# str3 = str2 + '3' + str2
# str4 = str3 + '4' + str3
# print(str4)
#
# mystr = '123' * 3 + '456' * 2 + '789' * 1
# print(mystr)


#print("\"Python is a great language!\", said Fred. \"I don't ever remember having this much fun before.\"")

# firstname = input()
# lastname = input()
# print(f"Hello {firstname} {lastname}! You just delved into Python.")

# name = input()
# count = len(name)
# print(f"Футбольная команда {name} имеет длину {count} символов")

"""
Даны названия трех городов. Напишите программу, которая определяет самое короткое и самое длинное название города.

Формат входных данных
На вход программе подаётся названия трех городов, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести самое короткое и длинное название города, каждое на отдельной строке.

Примечание. Гарантируется, что длины названий всех трех городов различны.


# a = [input() for x in range(3)]
a = ["Москва",
     "Санкт-Петербург",
     "Екатеринбург"]
b = [len(a[i]) for i in range(3)]

x ={}
for i in range(3):
    x[b[i]] = a[i]
print(x)

Min = (min(x.items()))
Max = (max(x.items()))

print(Min[1])
print(Max[1])
"""
#
# from random import random
#
# data = []
# for j in range(10):
#     data.append(int(random()*100))
# print(data)
# print(sorted(data))
# mx = 0
# mn = 99999
#
# for i in data:
#     print(i)
#     if i > mx:
#         mx = i
#
#
#
# print(f"максимум {mx}")
#
# j = "ж"
# a = "a"
# print(j<a)
#
#
# print(ord("a"))
# print(ord("A"))
#
import os
import string

"""сортировка пузырьком"""
"""
print("сортировка пузырьком")
dat = [15,8,4,3,8,2]
count = 0
print(dat)
for j in range(len(dat)-1):
    for i in range(len(dat)-1):
         if dat[i]>dat[i+1]:
             count +=1
             dat[i],dat[i+1] = dat[i+1],dat[i]
    print(dat)
print("количеств проходов ",count, "\n")


print("сортировка хуем")
mx = -9999
count1 = 0
for i in dat:
    if i > mx:
        mx = i
    count1 +=1
print(dat)
"""


# if "синий" in input(""):
#     print("YES")
# else:
#     print("NO")


# x1 = 2.0
# y1 = 2.5
# x2= 44.155
# y2 = 100.50
#
# print(math.sqrt(((x1-x2)**2)+((y1-y2)**2)))
# r = 554.6
# print(math.pi*r**2)
# print(2*math.pi*r)
#
# m = int(input())
# p = int(input())
# n = int(input())
#
# for i in range(n):
#     print("i",m*(p/100 +1)**i)

# a = 12
# b = -5
# if a<b:
#     [print(x) for x in range(a,b+1,1)]
# elif a == b :
#     print(a)
# else:
#     [print(x) for x in range(a,b-1,-1)]


# a = 1
# b = 20
# d = []
# for x in range(a, b+1, 1):
#
#     if x % 15 == 0 or x%17==0 or x%10==9:
#         d.append(x)
#         print(x)

# n = 5
# [print(f"{n} x {i} =", n*i) for i in range(1,11,1)]

# a = 20
# b = 23
# c = 0
# for i in range(a,b+1,1):
#     if i**3 % 10==4 or i**3 % 10==9:
#         c += 1
# print(c)

# a = int(input())
# d = [input() for i in range(a)]
# j = 0
# print(d)
#
# for i in range(len(d)):
#     j = j + int(d[i])
#     print(d[i])
# print(j)


# n = int(input())
# n = 10
# m =[]
# for i in range(1,n+1,1):
#     m.append(1/i)
# print(m)
#
# j = 0
# for i in range(len(m)):
#     j += m[i]
# print("сумма массива без логорифма ", j)
# print(j - math.log(n))

# c = int(input())
# a = [input() for i in range(1,c+1)]
# a = [9,7,5,4,3,2,78,1]
# mx = -888
# sr = 99999
#
# for i in range(len(a)):
#     if a[i] > mx:
#         mx=a[i]
# a.remove(mx)
# a = sorted(a)
# print(max(a))
#
# a = [i for i in range(1,21)]
# a = [i for i in range(2,21,2)]
# # a = [2,2,2,2,2,2,7,4,4,4,4]
# t = 0
# print(a)
# for i in range(len(a)):
#     if a[i]%2==0:
#         t += 1
# if t<10:
#     print("NO")
# elif t==10:
#     print("YES")



# n = 5678
# count = 0
# while n != 0:
#     lst = n % 10
#     n //= 10
#     count +=1
#     if count :
#         frst = n
#
# print(frst)
# print(count)


# n = 455672
# while n>9:
#     if 99>n>9:
#         # print(n % 10)
#         print(n%10)
#     n //= 10


# n = 1111111111
# lst = n % 10
# f = "YES"
# while n!=0:
#     if n%10!=lst:
#         f = "NO"
#     n //=10
# print(f)


# n = 6543211
# f = True
# lst = n%10
# while n!=0:
#     n = n//10
#     if n == 0:
#         break
#     if lst<=n%10:
#         f == True
#     elif lst>n%10:
#         f = False
#         break
#     print(lst,"<",n%10, lst<n%10)
#     lst = n%10
# if f == True:
#     print("YES")
# else:
#     print("NO")

# mult = 1
# for i in range(1, 11):
#    if i % 2 == 0:
#       continue
#    if i % 9 == 0:
#       break
#    mult *= i
# print(mult)

# n = 1
# for i in range(1,n+1):
#     if  5<=i<=9:
#         continue
#     elif  17<=i<=37:
#         continue
#     elif  78<=i<=87:
#         continue
#     print(i)

# import re
#
# s = ['Яблоко', 'яБлоко', 'ябЛоко', 'яблОко', 'яблоКо', 'яблокО']
#
# result = re.search('Яб',s)
# print(result)

# n = 100
# sum = 0
# for i in range(1,n+1,1):
#     if (i**2)%10==2 or (i**2)%10==5 or (i**2)%10==8:
#        sum += i
# print(sum)

# n = 3
# sum = 1
# for i in range(1,n+1,1):
#        sum *= i
# print(sum)

# m = [input() for i in range(1,11,1)]

# m =[8,0,1,2,1,0,0,5,4,12]
# mult = 1
# for i in range(len(m)):
#     if int(m[i]) != 0:
#         mult = mult * int(m[i])
# print(mult)

# n = 10
# sum = 0
# for i in range(1,n+1,1):
#     if n % i==0:
#         sum += i
# print(sum)

# n = 5
# c = -1
# sum = 0
# for i in range(1,n+1,1):
#     if i%2 !=0:
#         sum += i
#     else:
#         sum -= i
# print(sum)
# import time


# fib1 = fib2 = 1
# n = int(input())
# if n==1:
#     print(fib1, end=' ')
# else:
#     print(fib1, fib2, end=' ')
#
# for i in range(2, n):
#     fib1, fib2 = fib2, fib1 + fib2
#     print(fib2, end=' ')

# i = str(input())
# c = 0
# while (i != "стоп" and i != "хватит" and i != "достаточно") :
#     c+=1
#     i = str(input())
# print(c)

# i = int(input())
# while i%7==0:
#     print(i)
#     i = int(input())

# i = int(input())
# c = 0
# while i>=0:
#     c += i
#     i = int(input())
# print(c)

# i = int(input())
# c = 0
# while 5 >= i > 0:
#     if i == 5 :
#         c += 1
#     i = int(input())
# print(c)

# n = int(input())
# c = 0
# while n>=25:
#     c +=1
#     n = n - 25
# while n >= 10:
#     c += 1
#     n = n - 10
# while n >= 5:
#     c += 1
#     n = n - 5
# while n >= 1:
#     c += 1
#     n = n - 1
# print(c)

# n = int(input())
# while n != 0:  # пока в числе есть цифры
#     last_digit = n % 10  # получить последнюю цифру
#     # код обработки последней цифры
#     n = n // 10  # удалить последнюю цифру из числа


# num = 123456789
# total = 0
# while num != 0:
#     last_digit = num % 10
#     if last_digit > 4:
#         total += 1
#     num = num // 10
# print(total)

# n=9673210458
# print(n%10)
# while n != 0:
#     last = n%10
#     n //= 10
#     print(last)


# n = str(input())
# sum = 0
# proizv = 1
# for i in range(0,len(n),1):
#
#     sum += int(n[i])
#     proizv *= int(n[i])
# print(sum)
# print(len(n))
# print(proizv)
# print(sum/len(n))
# print(n[0])
# print(int(n[0])+int(n[3]))

# n = 123
# product = n % 10
# while n != 0:
#     digit = n % 10
#     n //= 10
#     product = product * digit
#
# print(product)

# counter = 0
# for i in range(99, 102):
#     temp = i
#     while temp > 0:
#         counter += 1
#         temp //= 10
# print(counter)

# n = int(input())
# for i in range(n):
#     print()
#     for j in range(3):
#         print(n,end=" ")

# n = int(input())
# for i in range(1,n+1):
#     print()
#     for j in range(1,10):
#         print(f"{i} + {j} =",i+j)
#

# n = 5
# for i in range(1,n+1):
#     print()
#     for j in range(1,i+1):
#         print(i, end="")


"""# //12x+13y=777."""
# total = 0
# for x in range(1, 65):
#     for y in range(1, 60):
#         if 12 * x + 13 * y == 777:
#             total += 1
#             print('x =', x, 'y =', y)
# print('Общее количество натуральных решений =', total)


"""# 28n+30k+31m=365 найти минимальное значение n"""
# for n in range(1,100):
#     for k in range(1,100):
#         for m in range(1,100):
#             if 28 * n + 30 * k +31 * m ==365:
#                 print("n=",n)
#                 print("k=",k)
#                 print("m=",m, "\n")
#                 break

"""Имеется 100100 рублей. 
Сколько быков, коров и телят можно купить на все эти деньги, 
если плата за быка – 1010 рублей, за корову – 55 рублей, 
за теленка – 0.50.5 рубля и надо купить 100100 голов скота?"""
# for b in range(0,100):
#     for c in range(0,100):
#         for l in range(0,100):
#             if 10*b + 5*c + 0.5*l == 100 and b+c+l == 100:
#                 print("быков=",b)
#                 print("коров=",c)
#                 print("ягнят=",l, "\n")
#                 break

""" a^5 + b^5 +c^5 + d^ 5 = e^5 """
# for a in range(0,150):
#     for b in range(0,150):
#         for c in range(0,150):
#             for d in range(0,150):
#                 for e in range(0,150):
#                     if math.pow(a,5)+math.pow(b,5)+math.pow(c,5)+math.pow(d,5) == math.pow(e,5) :
#                         print(a+b+c+d+e)
#                         break

"""Численный треугольник 3
Дано натуральное число nn. Напишите программу, которая печатает численный треугольник с высотой равной nn, в соответствии с примером:

3

1
2 3
4 5 6
"""

# n = 10
# c = 0
# for i in range(1,n+1):
#     print()
#     for j in range(1,i+1):
#         c += 1
#         print(c, end=" ")


# [print(*range(1, n + 1), *range(n - 1, 0, -1), sep='') for n in range(1, int(input("SOSITE HUI ")) + 1)]

"""
На вход программе подается два натуральных числа a и b (a< b). Напишите программу, которая находит натуральное число из отрезка [a;b] с максимальной суммой делителей.

Формат входных данных
На вход программе подаются два числа, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести два числа на одной строке, разделенных пробелом: число с максимальной суммой делителей и сумму его делителей.

Примечание. Если таких чисел несколько, то выведите наибольшее из них.

Sample Input 1:
1
10
Sample Output 1:
10 18
"""
# a, b = int(input()),int(input())
# a, b = 1,10
# sum = 0
# max_sum = 0
# count = 0
# for i in range(b,a-1,-1):
#     print()
#     sum = 0
#     for j in range(1,i+1):
#         if i % j==0:
#             sum += j
#             print(j,end=" ")
#         if max_sum<sum:
#             max_sum=sum
#             count =i
#
#     print("sum=",sum)
#
# print(count,"max= ",max_sum)


# a, b = 1,10
# sum = 0
# max_sum = 0
# count = 0
# for i in range(b,a-1,-1):
#     sum = 0
#     for j in range(1,i+1):
#         if i % j==0:
#             sum += j
#         if max_sum<sum:
#             max_sum=sum
#             count =i
# print(count,max_sum)

"""
На вход программе подается натуральное число nn. 
Напишите программу, выводящую графическое изображение делимости чисел от 11 до nn включительно. 
В каждой строке надо напечатать очередное число и столько символов «+», сколько делителей у этого числа.

Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести графическое изображение чисел от 11 до nn, каждое на отдельной строке.
Тестовые данные 
Sample Input:
5
Sample Output:
1+
2++
3++
4+++
5++
"""
# n = 5
# for i in range(1,n+1):
#     c = 0
#     for j in range(1,i+1):
#         if i % j==0:
#             c += 1
#     print(i,"+"*c, sep="")

"""
На вход программе подается натуральное число nn. Напишите программу, которая находит цифровой корень данного числа. Цифровой корень числа nn получается следующим образом: если сложить все цифры этого числа, затем все цифры найденной суммы и повторить этот процесс, то в результате будет получено однозначное число (цифра), которое и называется цифровым корнем данного числа.

Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести цифровой корень введенного числа.

Примечание. Используйте вложенные циклы while.

Sample Input:
192
Sample Output:
3
"""
# n = int(input())
# sum = 0
# while n>9:
#     sum = 0
#     while n>0:
#         last_digit = n %10
#         sum += last_digit
#         n = n //10
#     else:
#         n = sum
# print(n)

"""
Сумма факториалов
Дано натуральное число nn. Напишите программу, 
которая выводит значение суммы 1!+2!+3!+\ldots+n!1!+2!+3!+…+n!.

Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести значение суммы 1!+2!+3!+\ldots+n!1!+2!+3!+…+n!.

Примечание 1. Факториалом натурального числа nn, 
называется произведение всех натуральных чисел от 11 до nn, то есть
"""
# # n = int(input())
# n = 2
# m = 1
# s = 0
# for i in range(1,n+1):
#     m *= i
#     s +=m
# print(s)
#
# print(0.1+0.2)


"""
Простые числа
На вход программе подается два натуральных числа a и b (a< b). 
Напишите программу, которая находит все простые числа от a до b включительно.

Формат входных данных
На вход программе подаются два числа, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести все простые числа от aa до bb включительно, каждое на отдельной строке.

Примечание. Число 11 простым не является.
Тестовые данные
Sample Input 1:
2
15
"""

# # a,b = int(input()),int(input())
# a,b = 1,15
# c = 0
# for i in range(a,b+1):
#     c = 0
#
#     for j in range(1,i+1):
#         if i % j==0:
#             c += 1
#     if c==2:
#         print(i)
#
#
# for i in range(10, 5, -1):
#     print(i,end=" ")


"""=========================================9=========================================="""
"""9.1
Дополните приведенный код, используя индексатор, так чтобы он вывел символ запятой.    
"""
# s = "In 2010, someone paid 10k Bitcoin for two pizzas."
# print(s[7])
"""
Дополните приведенный код, используя индексатор, так чтобы он вывел символ w.
"""
# s = "In 2010, someone paid 10k Bitcoin for two pizzas."
# for i in s:
#     if i == "w":
#         ind = s.index(i)
# print(s[ind])
"""
В столбик 1
На вход программе подается одна строка. Напишите программу, которая выводит элементы строки с индексами 0, 2, 4, ... в столбик.
Формат входных данных
На вход программе подается одна строка.
Формат выходных данных
Программа должна вывести элементы строки с индексами 0, 2, 4, ..., каждое на отдельной строке.
"""
# n = "abcdefghijklmnop"
# for i in range(0,len(n), 2):
#     print(n[i])
"""
В столбик 2
На вход программе подается одна строка. Напишите программу, которая выводит в столбик элементы строки в обратном порядке.
Формат входных данных
На вход программе подается одна строка.
Формат выходных данных
Программа должна вывести в столбик элементы строки в обратном порядке. 
"""
# n = "abc"
# for i in range(len(n)-1,-1,-1):
#     print(n[i])
#
"""
ФИО
На вход программе подаются три строки: имя, фамилия и отчество. Напишите программу, которая выводит инициалы человека.
Формат входных данных
На вход программе подаются три строки, каждая на отдельной строке.
Формат выходных данных
Программа должна вывести ФИО человека.
Примечание. Гарантируется, что имя, фамилия и отчество начинаются с заглавной буквы.
"""
# n = [input() for i in range(3)]
# # n=["Jopa","Hui","Pizda"]
# print(n[1][0],n[0][0],n[2][0],)
"""
Цифра 1
На вход программе подается одна строка состоящая из цифр. Напишите программу, которая считает сумму цифр данной строки.
Формат входных данных
На вход программе подается одна строка состоящая из цифр.
Формат выходных данных
Программа должна вывести сумму цифр данной строки.
Sample Input:
2514
Sample Output:
12
"""
# n = input()
# s = 0
# for i in range(len(list(n))):
#     s+=int(n[i])
# print(s)
"""
Цифра 2
На вход программе подается одна строка. Напишите программу, которая выводит сообщение «Цифра» (без кавычек), если строка содержит цифру. В противном случае вывести сообщение «Цифр нет» (без кавычек).
Формат входных данных
На вход программе подается одна строка.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
"""
# n = input()
# n = "Hi Python"
# x = False
# for i in range(len(n)):
#     if n[i] in "1234567890":
#         x = True
# if x == True:
#     print("Цифра")
# else:
#     print("Цифр нет")
"""
Сколько раз?
На вход программе подается одна строка. Напишите программу, которая определяет сколько раз в строке встречаются символы + и *.
Формат входных данных
На вход программе подается одна строка.
Формат выходных данных
Программа должна вывести сколько раз встречаются символы  + и * в строке.
Тестовые данные 🟢
Sample Input:
bcd+a++++**31415
Sample Output:
Символ + встречается 5 раз
Символ * встречается 2 раз
"""
# n = "bcd+a++++**31415"
# plus = 0
# star = 0
# for i in range(len(n)):
#     if n[i]=="*":
#         star +=1
#     elif n[i]=="+":
#         plus+=1
# print("Символ + встречается {} раз\nСимвол * встречается {} раз".format(plus,star))
#
"""
Одинаковые соседи
На вход программе подается одна строка. Напишите программу, которая определяет сколько в ней одинаковых соседних символов.
Формат входных данных
На вход программе подается одна строка.
Формат выходных данных
Программа должна вывести количество одинаковых соседних символов.
Sample Input 1:
abcd
Sample Output 1:
0
Sample Input 2:
aabbcc
Sample Output 2:
3
"""
# n = "aabbcc"
# c = 0
# for i in range(len(n)-1):
#     if n[i]==n[i+1]:
#         c+=1
# print(c)

"""
Гласные и согласные
На вход программе подается одна строка с буквами русского языка. Напишите программу, которая определяет количество гласных и согласных букв.
Формат входных данных
На вход программе подается одна строка.
Формат выходных данных
Программа должна вывести количество гласных и согласных букв.
Примечание. В русском языке 10 гласных букв (а, у, о, ы, и, э, я, ю, ё, е) и 21 согласная буква (б, в, г, д, ж, з, й, к, л, м, н, п, р, с, т, ф, х, ц, ч, ш, щ).
Тестовые данные 🟢
Sample Input:
Вдохновение – это умение приводить себя в рабочее состояние!
Sample Output:
Количество гласных букв равно 25
Количество согласных букв равно 24
"""
# n = "Вдохновение – это умение приводить себя в рабочее состояние!"
# glasn = "а, у, о, ы, и, э, я, ю, ё, е"
# glasn =glasn.replace(", ","")+glasn.upper().replace(", ","")
# sogl = "б, в, г, д, ж, з, й, к, л, м, н, п, р, с, т, ф, х, ц, ч, ш, щ"
# sogl = sogl.replace(", ","")+sogl.upper().replace(", ","")
# g = 0
# s = 0
# for i in n:
#     for j in glasn:
#         if i==j:
#             g+=1
#     for d in sogl:
#         if i==d:
#             s+=1
# print(f"Количество гласных букв равно {g}\nКоличество согласных букв равно {s}")
"""
Decimal to Binary
На вход программе подается натуральное число, записанное в десятичной системе счисления. Напишите программу, которая переводит данное число в двоичную систему счисления.
Формат входных данных
На вход программе подается одно натуральное число.
Формат выходных данных
Программа должна вывести число записанное в двоичной системе счисления.
Тестовые данные 🟢
Sample Input 1:
5
Sample Output 1:
101
Sample Input 2:
128
Sample Output 2:
10000000
"""
#
# n = 10
# b = ''
# while n>0:
#     b = str(n%2) + b
#     n = n // 2
# print(b)
#
# print(str(bin(int(input())))[2:])
"""
Делаем срезы 1
На вход программе подается одна строка. Напишите программу, которая выводит:

общее количество символов в строке;
исходную строку повторенную 3 раза;
первый символ строки;
первые три символа строки;
последние три символа строки;
строку в обратном порядке;
строку с удаленным первым и последним символом.
"""
# n = input()
# print(len(n))
# print(n*3)
# print(n[0])
# print(n[:3])
# print(n[-3:])
# print(n[::-1])
# print(n[1:-1])
"""
Делаем срезы 2
На вход программе подается одна строка. Напишите программу, которая выводит:

1 третий символ этой строки;
2 предпоследний символ этой строки;
3 первые пять символов этой строки;
4 всю строку, кроме последних двух символов;
5 все символы с четными индексами;
6 все символы с нечетными индексами;
7 все символы в обратном порядке;
8 все символы строки через один в обратном порядке, начиная с последнего
"""
# n = "abcdefghijklmnopqrstuvwxyz"
# print("1",n[2])
# print("2",n[-2:-1:])
# print("3",n[:5])
# print("4",n[:-2:])
# print("5",n[::2])
# print("6",n[1::2])
# print("7",n[::-1])
# print("8",n[::-2])
"""
Две половинки
На вход программе подается строка текста. Напишите программу, которая разрежет ее на две равные части, переставит их местами и выведет на экран.
Формат входных данных
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Примечание. Если длина строки нечетная, то длина первой части должна быть на один символ больше.
Тестовые данные 🟢

"""
# n = "abcdefg"
# c = int(len(n)/2)
# if len(n)%2==0:
#     print(n[c::],n[:c:],sep="")
# else:
#     print(n[c+1::],n[:c+1:],sep="")

"""
Заглавные буквы
На вход программе подается строка состоящая из имени и фамилии человека, разделенных одним пробелом. Напишите программу, которая проверяет, что имя и фамилия начинаются с заглавной буквы.
Формат входных данных 
На вход программе подается строка.
Формат выходных данных
Программа должна вывести «YES» если имя и фамилия начинаются с заглавной буквы и «NO» в противном случае.
Примечание. Строка содержит только буквы. 
"""

# n = "chris alan"
# t = n.title()
# if n==t:
#     print("YES")
# else:
#     print("NO")
# #     best
# s = input()
# print(("NO", "YES")[s == s.title()])

"""
sWAP cASE
На вход программе подается строка. Напишите программу, которая меняет регистр символов, другими словами замените все строчные символы заглавными и наоборот.
Формат входных данных 
На вход программе подается строка.
Формат выходных данных
Программа должна вывести строку в соответствии с условием задачи.
"""
# print(str(input()).swapcase())

"""
Хороший оттенок
На вход программе подается строка текста. Напишите программу, которая определяет является ли оттенок текста хорошим или нет. Текст имеет хороший оттенок, если содержит подстроку «хорош» во всевозможных регистрах.
Формат входных данных 
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести «YES» если текст имеет хороший оттенок и «NO» в противном случае.
Примечание. Текст содержащий хорош, ХОРОШ, Хорош, хОРОШ и т.д. имеет хороший оттенок.
"""

# n = "оыралоывало ХОРОШвмсва выарлво83кг834"
# n = n.lower()
# if "хорош" in n:
#     print("hui")

"""
Нижний регистр
На вход программе подается строка. Напишите программу, которая подсчитывает количество буквенных символов в нижнем регистре.
Формат входных данных 
На вход программе подается строка.
Формат выходных данных
Программа должна вывести количество буквенных символов в нижнем регистре.
"""

# n = "gggggggg1212321ABDCEFCE"
# c = 0
# for i in range(len(n)):
#     if "a" <= n[i] <= "z":  #!!!!
#         c += 1
# print(c)


"""
                                                                                        Поиск и замена
Методы поиска и замены строк внутри других строк.

Каждый метод в этой группе поддерживает необязательные аргументы <start> и <end>. Как и в строковых срезах действие метода ограничено частью исходной строки, начинающейся с позиции символа <start> и продолжающейся вплоть до позиции символа <end>, но не включающей ее. Если параметр <start> указан, а параметр <end> нет, то метод применяется к части исходной строки от <start> до конца строки. Если параметры не заданы, то подразумевается, что <start> = 0 , <end> = len(s).

Метод count()
Метод count(<sub>, <start>, <end>) считает количество непересекающихся вхождений подстроки <sub> в исходную строку s.

Результатом выполнения следующего кода:
"""
# s = 'foo goo moo'
# print(s.count('oo'))
# print(s.count('oo', 0, 8))  # подсчет с 0 по 7 символ
# будет:
# 3
# 2
"""""
Метод startswith()
Метод startswith(<suffix>, <start>, <end>) определяет начинается ли исходная строка s подстрокой <suffix>. Если исходная строка начинается с подстроки <suffix>,метод возвращает значение True, а если нет, то  False.
Результатом выполнения следующего кода:
"""""
# s = 'foobar'
# print(s.startswith('foo'))
# print(s.startswith('baz'))
# будет:
#
# True
# False
"""
Метод endswith()
Метод endswith(<suffix>, <start>, <end>) определяет оканчивается ли исходная строка s подстрокой <suffix>. Метод возвращает значение True если исходная строка оканчивается на подстроку <suffix> и False в противном случае.

Результатом выполнения следующего кода:
"""
# s = 'foobar'
# print(s.endswith('bar'))
# print(s.endswith('baz'))
# будет:
#
# True
# False
"""
Методы find(), rfind()
Метод find(<sub>, <start>, <end>) находит индекс первого вхождения подстроки <sub> в исходной строке s. Если строка s не содержит подстроки <sub>, то метод возвращает значение -1. Мы можем использовать данный метод наравне с оператором in для проверки: содержит ли заданная строка некоторую подстроку или нет.
"""
# Результатом выполнения следующего кода:
#
# s = 'foo bar foo baz foo qux'
# print(s.find('foo'))
# print(s.find('bar'))
# print(s.find('qu'))
# print(s.find('python'))
# будет:
#
# 0
# 4
# 20
# -1

"""
Метод rfind(<sub>, <start>, <end>) идентичен методу find(<sub>, <start>, <end>), за тем исключением, что он ищет первое вхождение подстроки <sub> начиная с конца строки s.

Методы index(), rindex()
Метод index(<sub>, <start>, <end>) идентичен методу find(<sub>, <start>, <end>), за тем исключением, что он вызывает ошибку  ValueError: substring not found во время выполнения программы, если подстрока <sub> не найдена.

Метод rindex(<sub>, <start>, <end>) идентичен методу index(<sub>, <start>, <end>), за тем исключением, что он ищет первое вхождение подстроки <sub> начиная с конца строки s.

Методы find() и rfind() являются более безопасными чем index() и rindex(), так как не приводят к возникновению ошибки во время выполнения программы.
"""

"""
Метод strip()
Метод strip() возвращает копию строки s у которой удалены все пробелы стоящие в начале и конце строки.
"""
# Результатом выполнения следующего кода:
#
# s = '     foo bar foo baz foo qux      '
# print(s.strip())
# будет:
# foo bar foo baz foo qux

"""
Метод lstrip()
Метод lstrip() возвращает копию строки s у которой удалены все пробелы стоящие в начале строки.
"""
# Результатом выполнения следующего кода:
#
# s = '     foo bar foo baz foo qux      '
# print(s.lstrip())
# будет:
#
# foo bar foo baz foo qux⎵ ⎵ ⎵ ⎵ ⎵ ⎵
"""
Метод rstrip()
Метод rstrip() возвращает копию строки s у которой удалены все пробелы стоящие в конце строки.
"""
# Результатом выполнения следующего кода:
#
# s = '      foo bar foo baz foo qux      '
# print(s.rstrip())
# будет:
#
# ⎵ ⎵ ⎵ ⎵ ⎵ ⎵foo bar foo baz foo qux
#
"""
Методы strip(), lstrip(), rstrip() могут принимать на вход опциональный аргумент<chars>. Необязательный аргумент <chars>– это строка, которая определяет набор символов для удаления.

Метод replace()
Метод replace(<old>, <new>) возвращает копию s со всеми вхождениями подстроки <old>, замененными на <new>.
"""
# Результатом выполнения следующего кода:
#
# s = 'foo bar foo baz foo qux'
# print(s.replace('foo', 'grault'))
# будет:
#
# grault bar grault baz grault qux
"""
Метод replace() может принимать опциональный третий аргумент <count>,  который определяет количество замен.
"""
# Результатом выполнения следующего кода:
#
# s = 'foo bar foo baz foo qux'
# print(s.replace('foo', 'grault', 2))
# будет:
#
# grault bar grault baz foo qux

"""
Количество слов
На вход программе подается строка текста, состоящая из слов, разделенных ровно одним пробелом. Напишите программу, которая подсчитывает количество слов в ней.

Формат входных данных 
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести количество слов.

Примечание 1. Строка текста не содержит пробелов в начале и конце.
Примечание 2. Используйте для решения задачи метод count.
"""
# n = input()
# print(n.count(" ")+1)

"""
Минутка генетики
На вход программе подается строка генетического кода, 
состоящая из букв А (аденин), Г (гуанин), Ц (цитозин), Т (тимин). 
Напишите программу, которая подсчитывает сколько аденина, гуанина, цитозина и тимина входит в данную строку генетического кода.
Формат входных данных 
На вход программе подается строка генетического кода, состоящая из символов А, Г, Ц, Т, а, г, ц, т.

Формат выходных данных
Программа должна вывести сколько гуанина, тимина, цитозина, аденина входит в данную строку генетического кода.

Примечание. Строка не содержит символов, кроме как А, Г, Ц, Т, а, г, ц, т.

Тестовые данные 🟢
Sample Input 1:
АааГГЦЦцТТттт
Sample Output 1:

Аденин: 3
Гуанин: 2
Цитозин: 3
Тимин: 5
"""
# n = "АааГГЦЦцТТттт"
# n = n.lower()
# def decrypt(code):
#     print("Аденин: {}\nГуанин: {}\nЦитозин: {}\nТимин: {}\n".format(n.count('а'),n.count('г'),n.count('ц'),n.count('т')))
# decrypt(n)

"""
Очень странные дела
Джим Хоппер с помощью радиоприемника пытается получить сообщение Оди. 
На приемник ему поступает nn различных последовательностей кода Морзе. 
Декодировав их, он получает последовательности из цифр и строчного латинского алфавита, 
при этом во всех сообщениях Оди содержится число 11, причем минимум 3 раза. 
Помогите определить Джиму количество сообщений от Оди.
Формат входных данных
В первой строке подаётся число nn – количество сообщений, 
в последующих nn строках вводятся строки, содержащие латинские строчные буквы и цифры.

Формат выходных данных
Программа должна вывести количество строк в которых содержится число 11 минимум 3 раза.

Примечание: Числа 11 необязательно должны быть разделены другими символами, 
нужно подсчитать вхождение последовательности символов "11", т.е. 
например в строке "111" содержится одна такая последовательность, в то время как в "1111" их уже две.
"""
# n = 3
# st = ["erforfjerjogrierg","111111111111111111111111111111111111111111111111111111111111111111","vk"]
# st = []
# c = 0
# for i in range(n):
#     st.append(str(input()))
# for j in st:
#     if j.count('11')>=3:
#         c+=1
# print(c)

"""
Количество цифр

На вход программе подается строка текста. Напишите программу, которая подсчитывает количество цифр в данной строке.
Формат входных данных 
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести количество цифр в данной строке.
Тестовые данные 🟢
Sample Input 1:
nezabud dl-6
Sample Output 1:
1
"""

# n = "1029384756aaa1234567890"
# c = 0
# for i in range(len(n)):
#     if n[i].isdigit()==True:
#         c+=1
# print(c)
#                  BEST
# print(sum(i.isdigit() for i in input()))
# print(len([i for i in input() if i.isdigit()]))

"""
.com or .ru

На вход программе подается строка текста. Напишите программу, которая проверяет, что строка заканчивается подстрокой .com или .ru.
Формат входных данных 
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести «YES» если введенная строка заканчивается подстрокой .com или .ru и «NO» в противном случае.

Тестовые данные 🟢
Sample Input 1:

www.stepik.org
Sample Output 1:

NO
"""
# n = "www.stepik.org"
# print("YES" if n.endswith(".com") or n.endswith(".ru") else "NO")

"""
Самый частотный символ
На вход программе подается строка текста. Напишите программу, которая выводит на экран символ, который появляется наиболее часто.

Формат входных данных 
На вход программе подается строка текста. Текст может содержать строчные и заглавные буквы английского и русского алфавита, а также цифры.

Формат выходных данных
Программа должна вывести символ, который появляется наиболее часто.

Примечание 1. Если таких символов несколько, следует вывести последний по порядку символ.
Примечание 2. Следует различать заглавные и строчные буквы, а также буквы русского и английского алфавита.

Тестовые данные 🟢
Sample Input 1:
aaaabbc
Sample Output 1:
a
"""
# n = "aaaaabbbbbc"
# max=0
# c = 0
# for i in n:
#     if n.count(i)>=max:
#         max = n.count(i)
#         c = i
# print(c,end="")

"""
Первое и последнее вхождение
На вход программе подается строка текста. Если в этой строке буква «f» встречается только один раз, выведите её индекс. 
Если она встречается два и более раз, выведите индекс её первого и последнего вхождения на одной строке, разделенных символом пробела. Если буква «f» в данной строке не встречается, следует вывести «NO».

Формат входных данных 
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Тестовые данные 🟢
Sample Input 1:
abcdefg
Sample Output 1:
5
"""
# n = "abcd"
# if n.count("f")>=2:
#     print(n.find('f'),end=" ")
#     print(n.rfind('f'))
# elif n.count("f")==1:
#     print(n.index("f"))
# else:
#     print("NO")

"""
Удаление фрагмента
На вход программе подается строка текста, в которой буква «h» встречается минимум два раза. 
Напишите программу, которая удаляет из этой строки первое и последнее вхождение буквы «h», а также все символы, находящиеся между ними.
Формат входных данных 
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Тестовые данные 🟢
Sample Input 1:
ahahahahaha
Sample Output 1:
aa
"""
# n = "hh"
# print(n[:n.find('h'):],n[n.rfind('h')+1::],sep="")
"""
Символы в диапазоне

На вход программе подаются два числа aa и bb. 
Напишите программу, которая для каждого кодового значения в диапазоне от aa до bb (включительно), 
выводит соответствующий ему символ из таблицы символов Unicode.
Формат входных данных 
На вход программе подается два натуральных числа, каждое на отдельное строке.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Тестовые данные 🟢
Sample Input 1:
65
70
Sample Output 1:
A B C D E F
"""
# n = [int(input())for i in range(2)]
# print(*[chr(i) for i in range(n[0],n[1]+1)])
# ________________________BEST___________________________________________
# [print(chr(i), end=' ') for i in range(int(input()), int(input())+1)]
# print(*[chr(i) for i in range(int(input()), int(input())+1)])

"""

Простой шифр

На вход программе подается строка текста. Напишите программу, которая переводит каждый ее символ в соответствующий ему код из таблицы символов Unicode.
Формат входных данных 
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести кодовые значения символов строки разделенных одним символом пробела.
Тестовые данные 🟢
Sample Input:
Hello world!
Sample Output:
72 101 108 108 111 32 119 111 114 108 100 33

"""
# print(*[ord(i) for  i in input()])

"""
Шифр Цезаря 🌶️

Легион Цезаря, созданный в 23 веке на основе Римской Империи не изменяет древним традициям и использует шифр Цезаря. Это их и подвело, ведь данный шифр очень простой. Однако в постапокалипсисе люди плохо знают все тонкости довоенного мира, поэтому ученые из НКР не могут понять как именно нужно декодировать данные сообщения. Напишите программу для декодирования этого шифра.

Формат входных данных
В первой строке дается число n (1≤ n≤ 25)n (1≤ n≤ 25) – сдвиг, во второй строке даётся закодированное сообщение в виде строки со строчными латинскими буквами.

Формат выходных данных
Программа должна вывести одну строку – декодированное сообщение. Обратите внимание, что нужно декодировать сообщение, а не закодировать.
Тестовые данные 🟢

Sample Input 1:
1
bwfusvfupdbftbs
Sample Output 1:
avetruetocaesar

1. Получаем зашифрованный текст
2. Получаем число сдвига
3. Создаем переменную для записи и вывода результата дешифрования
4. Создаем словарь латинских букв
5. Создаем цикл, который будет проверять каждую букву зашифрованного текста со словарем 
6. Если порядковый номер буквы минус сдвиг находится в диапазоне от 0 до конца алфавита словаря, добавляем в результат букву со сдвигом влево

"""
#
# text ="fsfftsfufksttskskt"
# key = 14
# dictionary = "abcdefghijklmnopqrstuvwxyz"
#
# print(text)
# for i in text:
#     if i in dictionary:
#         s = dictionary.index(i)
#         print(dictionary[s-key],end="")

"""_______________ЭКЗАМЕН________________"""

"""
Каждый третий
На вход программе подается строка текста. Напишите программу, которая удаляет из нее все символы с индексами кратными 3, то есть символы с индексами 0, 3, 6, ....
Формат входных данных 
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести строку текста в соответствии с условием задачи.
Тестовые данные 🟢
Sample Input:
Python
Sample Output:

yton

"""

# s = list(input())
# del s[::3]
# print(*s,sep="")


"""
Замени меня полностью
На вход программе подается строка текста. Напишите программу, которая заменяет все вхождения цифры 1 на слово «one».
Формат входных данных 
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Тестовые данные 🟢
Sample Input:
1231
Sample Output:
one23one
"""

# s = "1231"
# print(s.replace("1","one"))
#

"""
али меня полностью
На вход программе подается строка текста. Напишите программу, которая удаляет все вхождения символа «@».
Формат входных данных 
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Тестовые данные 🟢
Sample Input 1:
123@1@@34
Sample Output 1:
123134
Sample Input 2:
@@
Sample Output 2:

"""
#
# s = "123@1@@34"
# print(s.replace("@",""))

"""
Второе вхождение
На вход программе подается строка текста. 
Напишите программу, которая выводит индекс второго вхождения буквы «f». 
Если буква «f» встречается только один раз, выведите число -1, а если не встречается ни разу, выведите число -2.

Формат входных данных 
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Тестовые данные 🟢
Sample Input 1:
affective
Sample Output 1:
2
Sample Input 2:
python
Sample Output 2:
-2
Sample Input 3:
father
Sample Output 3:
-1
"""
# s = "father"
# if s.count('f')<1:
#     print('-2')
# elif s.count('f')==1:
#     print('-1')
#
# else:
#     print(s.find('f',s.find('f')+1,len(s)))

"""
Переворот
На вход программе подается строка текста в которой буква «h» встречается как минимум два раза.
Напишите программу, которая возвращает исходную строку и переворачивает последовательность символов, 
заключенную между первым и последним вхождением буквы «h».

Формат входных данных 
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Тестовые данные 🟢
Sample Input 1:
abch12345h
Sample Output 1:
abch54321h
Sample Input 2:
qwertyhasdfghzxcvb
Sample Output 2:
qwertyhgfdsahzxcvb
"""
# s = "abch12345hjopa"
# Prt1 = s[:s.find('h')+1]
# Prt3 = s[s.rfind('h'):]
# Prt2 = s.replace(Prt1,"").replace(Prt3,"")
# Prt2 = Prt2[::-1]
# print(f"{Prt1}{Prt2}{Prt3}")

"""____11___"""
"""
Список чисел
На вход программе подается одно число nn. Напишите программу, которая выводит список [1, 2, 3, ..., n].

Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Тестовые данные 🟢
Sample Input 1:
1
Sample Output 1:
[1]
Sample Input 2:
5
Sample Output 2:
[1, 2, 3, 4, 5]
Sample Input 3:
10
Sample Output 3:
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
"""

# print([i for i in range(int(input())+1)])

"""
Список букв
На вход программе подается одно число nn. Напишите программу, которая выводит список, состоящий из nn букв английского алфавита ['a', 'b', 'c', ...] в нижнем регистре.
Формат входных данных
На вход программе подается натуральное число n, \, n \le 26n,n≤26.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Тестовые данные 🟢
Sample Input 1:
1
Sample Output 1:
['a']
Sample Input 2:
5
Sample Output 2:
['a', 'b', 'c', 'd', 'e']
Sample Input 3:
10
Sample Output 3:
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
"""
# print([chr(i) for i in range(ord("a"), ord("a")+int(input()))])


"""
11.3___Все сразу 1 🌶️
Дополните приведенный код, чтобы он:

Вывел длину списка;
Вывел последний элемент списка;
Вывел список в обратном порядке (вспоминаем срезы);
Вывел YES если список содержит числа 5 и 17, и NO в противном случае;
Вывел список с удаленным первым и последним элементами.
Примечание. Каждый вывод осуществлять с новой строки.

"""
# numbers = [2, 6, 3, 14, 10, 4, 11, 16, 12, 5, 4, 16, 1, 0, 8, 16, 10, 10, 8, 5, 1, 11, 10, 10, 12, 0, 0, 6, 14, 8, 2,
#            12, 14, 5, 6, 12, 1, 2, 10, 14, 9, 1, 15, 1, 2, 14, 16, 6, 7, 5]
# print('1__', len(numbers))
# print('2__', numbers[-1])
# print('3__', numbers[::-1])
# print('4__', 'YES') if '5' in numbers and '17' in numbers else print('NO')
# del numbers[:1:]
# del numbers[-1::]
# print('5__', *[numbers])

"""
11.3___Список строк
На вход программе подается натуральное число n, а затем nn строк. Напишите программу, которая создает из указанных строк список и выводит его.
Формат входных данных
На вход программе подаются натуральное число n, а затем nn строк, каждая на отдельной строке.
Формат выходных данных
Программа должна вывести список состоящий из указанных строк.
Тестовые данные 🟢
Sample Input:
5
C#
C++
C
Python
F#
Sample Output:

['C#', 'C++', 'C', 'Python', 'F#']

"""

# print([input() for i in range(int(input()))])

"""
11.3__Алфавит
Напишите программу, выводящую следующий список:
['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', ...]
Формат выходных данных
Программа должна вывести указанный список.
Примечание. Последний элемент списка состоит из 26 символов z.

"""
# l=[]
# for i in range(26):
#     l.append(chr(ord('a')+i)*(i+1))
# print(l)

"""
11.3___Список кубов
На вход программе подается натуральное число nn, а затем nn целых чисел. Напишите программу, которая создает из указанных чисел список их кубов.

Формат входных данных
На вход программе подаются натуральное число nn, а затем nn целых чисел, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести список, состоящий из кубов указанных чисел.
Тестовые данные 🟢
Sample Input 1:
5
1
2
3
4
5
Sample Output 1:
[1, 8, 27, 64, 125]
Sample Input 2:
2
-5
-2
Sample Output 2:
[-125, -8]
Sample Input 3:
1
100
Sample Output 3:
[1000000]
"""
# print([int(input())**3 for i in range(int(input()))])

"""
11.3___Список делителей
На вход программе подается натуральное число nn. Напишите программу, которая создает список состоящий из делителей введенного числа.
Формат входных данных
На вход программе подается натуральное число nn.
Формат выходных данных
Программа должна вывести список, состоящий из делителей введенного числа.
Тестовые данные 🟢
Sample Input 1:
17
Sample Output 1:
[1, 17]
Sample Input 2:
25
Sample Output 2:
[1, 5, 25]
Sample Input 3:
36
Sample Output 3:
[1, 2, 3, 4, 6, 9, 12, 18, 36]
# """
# n = int(input())
# print([i for i in range(1,n+1) if n%i==0])
# _________Best
#print(*[[i for i in range(1, n + 1) if n % i == 0] for n in [int(input())]])


"""11.3___Суммы двух
На вход программе подается натуральное число n≥2, а затем nn целых чисел. 
Напишите программу, которая создает из указанных чисел список, состоящий из сумм соседних чисел (0 и 1, 1 и 2, 2 и 3 и т.д.).
Формат входных данных
На вход программе подаются натуральное число nn, а затем nn целых чисел, каждое на отдельной строке.
Формат выходных данных
Программа должна вывести список, состоящий из сумм соседних чисел.
Тестовые данные 🟢
Sample Input 1:
5
1
2
3
4
5
Sample Output 1:

[3, 5, 7, 9]
Sample Input 2:
2
10
9
Sample Output 2:
[19]
"""
# n, temp = int(input()), int(input())
# l = []
# for i in range(n-1):
#     a = int(input())
#     l.append(temp+a)
#     temp = a
# print(l)

"""
11.3___Удалите нечетные индексы
На вход программе подается натуральное число n, а затем n целых чисел. Напишите программу, 
которая создает из указанных чисел список, затем удаляет все элементы стоящие по нечетным индексам,
а затем выводит полученный список.

Формат входных данных
На вход программе подаются натуральное число n, а затем nn целых чисел, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести список в соответствии с условием задачи.

Примечание. Используйте оператор del.

Тестовые данные 🟢
Sample Input 1:

10
0
1
2
3
4
5
6
7
8
9
Sample Output 1:

[0, 2, 4, 6, 8]

# """
# lst = [int(input()) for i in range(int(input()))]
# del lst[1::2]
# print(lst)

"""
11.3___k-ая буква слова 🌶️🌶️
На вход программе подается натуральное число n и n строк, а затем число k. Напишите программу, которая выводит k-ую букву из введенных строк на одной строке без пробелов.

Формат входных данных
На вход программе подается натуральное число n,  далее n строк, каждая на отдельной строке. В конце вводится натуральное число k – номер буквы (нумерация начинается с единицы).

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Примечание. Если некоторые строки слишком короткие, и в них нет символа с заданным номером, то такие строки при выводе нужно игнорировать.

Тестовые данные 🟢
Sample Input:

5
abcdef
bcdefg
cdefgh
defghi
efghij
2
Sample Output:

bcdef
"""
# n = 5
# lst =['aaaaa','bbbb','ccc','dd','e']
# k = 3
# for i in range(n):
#     lst.append(input())
# k = int(input())
# for i in lst:
#     if k < len(i):
#         print(i[k],end='')

"""
11.3___Символы всех строк
На вход программе подается натуральное число nn, а затем nn строк. Напишите программу, которая создает список из символов всех строк, а затем выводит его.
Формат входных данных
На вход программе подаются натуральное число nn, а затем nn строк, каждая на отдельной строке.
Формат выходных данных
Программа должна вывести список состоящий из символов всех введенных строк.
Примечание. В результирующем списке могут содержаться одинаковые символы.
Тестовые данные 🟢
Sample Input:

3
abc
def
ghi
Sample Output:
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']
"""
# n = int(input())
# l =[input() for i in range(n)]
# nl = []
# for i in l:
#     nl.extend(i)
# print(nl)
#______________best____________
# print([c for i in range(n) for c in input()])
#______________________________
# l = []
# [l.extend(input()) for i in range(int(input()))]
# print(l)

"""
11.4___Дополните приведенный код, так чтобы он вывел сумму квадратов элементов списка numbers.
numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
"""
# numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
# print(sum([i**2 for i in numbers]))

"""
11.4___Значение функции
На вход программе подается натуральное число nn, а затем nn целых чисел. Напишите программу, которая для каждого введенного числа xx выводит значение функции f(x) = x^2 + 2x + 1f(x)=x 
2
 +2x+1, каждое на отдельной строке.

Формат входных данных
На вход программе подаются натуральное число nn, а затем nn целых чисел, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести сначала введенные числа, затем пустую строку, а затем соответствующие значения функции.

Примечание. Для первого теста имеем:
f(1) = 1^2 + 2\cdot 1 + 1 = 4, \, f(2) = 2^2 + 2\cdot 2 + 1 = 9, \, f(3) = 3^2 + 2 \cdot 3 + 1 = 16, \ldots

Тестовые данные 🟢
Sample Input 1:

5
1
2
3
4
5
Sample Output 1:

1
2
3
4
5

4
9
16
25
36
"""

# n = int(input())
# x = []
# for i in range(n):
#     x.append(int(input()))
# for i in range(n):
#     print(x[i])
# print()
# for i in range(n):
#     print((x[i] + 1) ** 2)

#_____________best
# numbers = [int(input()) for _ in range(int(input()))]
# print(*numbers, '',*[(x + 1) ** 2 for x in numbers], sep='\n')
"""
11.4___Remove outliers
При анализе данных, собранных в рамках научного эксперимента, бывает полезно удалить самое большое и самое маленькое значение.

На вход программе подается натуральное число nn, а затем nn различных натуральных чисел. Напишите программу, которая удаляет наименьшее и наибольшее значение из указанных чисел, а затем выводит оставшиеся числа каждое на отдельной строке, не меняя их порядок.

Формат входных данных
На вход программе подаются натуральное число nn, а затем nn различных натуральных чисел, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

"""
# n = 10
# l = [9,17,189,3,55,78,11,7,888,160]
#
# del l[l.index(max(l))]
# del l[l.index(min(l))]
# print(*l,sep='\n')
#_________best
# ls = [int(input()) for _ in range(int(input()))]
# [print(i) for i in ls if i not in (max(ls), min(ls))]


"""
11.4___Без дубликатов
На вход программе подается натуральное число nn, а затем n строк. Напишите программу, которая выводит только уникальные строки, в том же порядке, в котором они были введены.

Формат входных данных
На вход программе подаются натуральное число nn, а затем nn строк, каждая на отдельной строке.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Примечание. Считайте, что все строки состоят из строчных символов.

Тестовые данные 🟢
Sample Input:

5
first
second
first
third
second
Sample Output:

first
second
third
"""
# n = 5
# x = []
# l = ['first','second','first','third','second']
# for i in range(len((l))):
#     if l[i] not in x:
#         x.append(l[i])
# print(x)

"""
11.4___Google search - 1
На вход программе подается натуральное число nn, затем nn строк, затем еще одна строка — поисковый запрос. Напишите программу, которая выводит все введенные строки, в которых встречается поисковый запрос.

Формат входных данных
На вход программе подаются натуральное число nn — количество строк, затем сами строки в указанном количестве, затем один поисковый запрос.

Формат выходных данных
Программа должна вывести все введенные строки, в которых встречается поисковый запрос.

Примечание. Поиск не должен быть чувствителен к регистру символов.

Тестовые данные 🟢
Sample Input:

5
Язык Python прекрасен
C# - отличный язык программирования
Stepik - отличная платформа
BEEGEEK FOREVER!
язык Python появился 20 февраля 1991
язык
Sample Output:

Язык Python прекрасен
C# - отличный язык программирования
язык Python появился 20 февраля 1991
"""
# n = 6
# l = ['A caelo usque ad BEEGEEK centrum', 'A capillo usque ad ungues', 'A capite ad calcem beegeek', 'Ab absurdo beegeeK', 'Ab BEEGEEK equis ad asinos','Ab hoedis scindere oves']
# s = 'Beegeek'
# for i in range(len(l)):
#     if s.lower() in l[i].lower():
#         print(l[i])
# _________Best
# my_list, word = [input() for _ in range(int(input()))], input()
# [print(i) for i in my_list if word.lower() in i.lower()]

"""
11.4___Google search - 2 🌶️🌶️
На вход программе подается натуральное число nn, затем nn строк, затем число kk — количество поисковых запросов, затем kk строк — поисковые запросы. Напишите программу, которая выводит все введенные строки, в которых встречаются все поисковые запросы.

Формат входных данных
На вход программе подаются натуральное число nn — количество строк, затем сами строки в указанном количестве, затем число kk, затем сами поисковые запросы.

Формат выходных данных
Программа должна вывести все введенные строки, в которых встречаются все поисковые запросы.

Примечание. Поиск не должен быть чувствителен к регистру символов.

Тестовые данные 🟢
Sample Input:

5
Язык Python прекрасен
C# - отличный язык программирования
Stepik - отличная платформа
BEEGEEK FOREVER!
язык Python появился 20 февраля 1991
2
язык
python
Sample Output:

Язык Python прекрасен
язык Python появился 20 февраля 1991

"""
# strngs = ([input() for _ in range(int(input()))])
# reqests = ([input() for _ in range(int(input()))])
# d = []
# c = 0
# for i in range(len(strngs)):
#     for reqest in reqests:
#         if reqest.lower() in strngs[i].lower():
#             c += 1
#         if c == len(reqests):
#             d.append(strngs[i])
#             c = 0
# print(*d,sep="\n")

"""
11.4___Negatives, Zeros and Positives
На вход программе подается натуральное число nn, а затем nn целых чисел. Напишите программу, которая сначала выводит все отрицательные числа, затем нули, а затем все положительные числа, каждое на отдельной строке. Числа должны быть выведены в том же порядке, в котором они были введены.

Формат входных данных
На вход программе подаются натуральное число nn, а затем nn целых чисел, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
"""
# n = 7
# l = ['3','-4','1','1','0','-1','0','-2']
# nl =[]
# for i in l:
#     if int(i)<0:
#         nl.append(i)
#
# for i in l:
#     if int(i)==0:
#         nl.append(i)
#
# for i in l:
#     if int(i)>0:
#         nl.append(i)
#
# print(*nl,sep="\n")
# __________________Best
# x = [int(input()) for _ in range(int(input()))]
# print(*[i for i in x if i < 0], *[i for i in x if i == 0], *[i for i in x if i > 0], sep = '\n')


"""
11.5___Построчный вывод
На вход программе подается строка текста. Напишите программу, которая выводит слова введенной строки в столбик.

Формат входных данных
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Тестовые данные 🟢
Sample Input:

У лукоморья дуб зеленый златая цепь на дубе том
Sample Output:

У
лукоморья
дуб
зеленый
златая
цепь
на
дубе
том

"""

# l = 'У лукоморья дуб зеленый златая цепь на дубе том'
# w = l.split()
# print(*w, sep='\n')

"""
11.5___Инициалы
На вход программе подается строка текста, содержащая имя, отчество и фамилию человека. Напишите программу, которая выводит инициалы человека.

Формат входных данных
На вход программе подается строка текста, содержащая имя, отчество и фамилию человека.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Тестовые данные 🟢
Sample Input:

Владимир Семенович Высоцкий
Sample Output:

В.С.В.
"""
# fio = input().split()
# s = []
# for i in fio:
#     s.append(i[0])
# d = ".".join(s)
# print(d,end='.')
# ______Best
# print('.'.join([name[0] for name in input().split()]), end='.')
#
# s = input().split()
# print(s[0][0], s[1][0], s[2][0], sep='.', end='.')
"""
11.5___Windows OS
В операционной системе Windows полное имя файла состоит из буквы диска, после которого ставится двоеточие и символ  "\",  затем через такой же символ перечисляются подкаталоги (папки), в которых находится файл, в конце пишется имя файла (C:\Windows\System32\calc.exe).

На вход программе подается одна строка с корректным именем файла в операционной системе Windows. Напишите программу, которая разбирает строку на части, разделенные символом "\". Каждую часть вывести в отдельной строке.

Формат входных данных
На вход программе подается одна строка.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Тестовые данные 🟢
Sample Input:

C:\Windows\System32\calc.exe
Sample Output:

C:
Windows
System32
calc.exe

"""

# path = "C:\Windows\System32\calc.exe".split('\\')
# print(*path,sep='\n')

"""
11.5___Диаграмма
На вход программе подается строка текста, содержащая целые числа. Напишите программу, которая по заданным числам строит столбчатую диаграмму.

Формат входных данных
На вход программе подается строка текста, содержащая целые числа, разделенных символом пробела.

Формат выходных данных
Программа должна вывести столбчатую диаграмму.

Тестовые данные 🟢
Sample Input 1:

1 2 3 4 5
Sample Output 1:

+
++
+++
++++
+++++
"""

# n = input().split(' ')
# for i in n:
#     print('+'*int(i))

"""
11.5___Корректный ip-адрес
На вход программе подается строка текста, содержащая 4 целых числа разделенных точкой. Напишите программу, которая определяет является ли введенная строка текста корректным ip-адресом.

Формат входных данных
На вход программе подается строка текста, содержащая 4 целых числа разделенных точкой.

Формат выходных данных
Программа должна вывести «ДА», если введеная строка является корректным ip-адресом, и «НЕТ» — в противном случае.

Примечание. ip-адрес является корректным, если все 4 числа находятся в диапазоне от 0 до 255 включительно.

"""
# n = input().split('.')
# f = 'ДА'
# for i in n:
#     if int(i) not in range(0,256):
#         # print(i)
#         f = 'НЕТ'
#         break
# print(f)
#
# ___________BEST
# print(('НЕТ', 'ДА')[sum(0 <= int(n) <= 255 for n in input().split('.')) == 4])
#
# print('НЕТ' if False in [int(i) in range(256) for i in input().split('.')] else 'ДА')
#
# print(("НЕТ", "ДА")[all([0 <= int(c) <= 255 for c in input().split('.')])])

"""
11.5___Добавь разделитель
На вход программе подается строка текста и строка разделитель. Напишите программу, которая вставляет указанный разделитель между каждым символом введенной строки текста.

Формат входных данных
На вход программе подается строка текста и строка разделитель, каждая на отдельной строке

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Тестовые данные 🟢
Sample Input 1:

1234567
*
Sample Output 1:

1*2*3*4*5*6*7

"""
# n,s = input(),input()
# print(s.join(n))
#
# ________best
# print(*list(input()), sep=input())

# print(*input(), sep=input())

"""
11.5___Количество совпадающих пар
На вход программе подается строка текста, содержащая натуральные числа. 
Из данной строки формируется список чисел. Напишите программу, которая подсчитывает, 
сколько в полученном списке пар элементов, равных друг другу. 
Считается, что любые два элемента, равные друг другу образуют одну пару, 
которую необходимо посчитать.

Формат входных данных
На вход программе подается строка текста, содержащая натуральные числа, 
отделенные символом пробела.

Формат выходных данных
Программа должна вывести одно число – количество пар элементов, равных друг другу.

Тестовые данные 🟢
Sample Input 1:
1 7 5 7 5
Sample Output 1:
2
Sample Input 2:
3 3 3 3 3
Sample Output 2:
10
Sample Input 3:
8 7 6
Sample Output 3:
0

"""
# n ="1 7 5 7 5".split()
# c = 0
# for i in range(len(n)):
#     for j in range(i+1,len(n)):
#         if n[i]==n[j]:
#             c+=1
# print(c)

"""
11.6___Все сразу 2 🌶️
Дополните приведенный код, чтобы он:

Заменил второй элемент списка на 17;
Добавил числа 4, 5 и 6 в конец списка;
Удалил первый элемент списка;
Удвоил список;
Вставил число 25 по индексу 3;
Вывел список, с помощью функции print()
"""
# numbers = [8, 9, 10, 11]
# numbers[1] = 17
# numbers.extend([4, 5, 6])
# del numbers[0]
# numbers *= 2
# numbers.insert(3, 25)
# print(numbers)

"""
11.6___Переставить min и max
На вход программе подается строка текста, содержащая различные натуральные числа. Из данной строки формируется список чисел. Напишите программу, которая меняет местами минимальный и максимальный элемент этого списка.

Формат входных данных
На вход программе подается строка текста, содержащая различные натуральные числа, разделенные символом пробела.

Формат выходных данных
Программа должна вывести строку текста в соответствии с условием задачи.

Примечание. Используйте подходящие встроенные функции и списочные методы.

"""

# n = "10 9 8 7 6 5 4 3 2 1".split()
# s = [int(i) for i in n]
# i_min =s.index(min(s))
# i_max =s.index(max(s))
# s[i_min],s[i_max] = s[i_max],  s[i_min]
# print(s)
#________Best
# s = [int(c) for c in input().split()]
# a, b = s.index(max(s)), s.index(min(s))
# s[a], s[b] = s[b], s[a]
# print(*s)

"""
11.6___Количество артиклей
На вход программе подается строка, содержащая английский текст. Напишите программу, которая подсчитывает общее количество артиклей: 'a', 'an', 'the'.

Формат входных данных
На вход программе подается строка, содержащая английский текст. Слова текста разделены символом пробела.

Формат выходных данных
Программа должна вывести общее количество артиклей 'a', 'an', 'the' вместе с поясняющим текстом.

Примечание. Артикли могут начинаться с заглавной буквы 'A', 'An', 'The'.

Тестовые данные 🟢
Sample Input:

William Shakespeare was born in the town of Stratford, England, in the year 1564. When he was a young man, Shakespeare moved to the city of London, where he began writing plays. His plays were soon very successful, and were enjoyed both by the common people of London and also by the rich and famous. In addition to his plays, Shakespeare wrote many short poems and a few longer poems. Like his plays, these poems are still famous today.
Sample Output:

Общее количество артиклей: 7

"""
# text = "William Shakespeare was born in the town of Stratford, England, in the year 1564. When he was a young man, Shakespeare moved to the city of London, where he began writing plays. His plays were soon very successful, and were enjoyed both by the common people of London and also by the rich and famous. In addition to his plays, Shakespeare wrote many short poems and a few longer poems. Like his plays, these poems are still famous today.".lower().split()
# art = ['a','an','the']
# c = 0
# for i in range(len(text)):
#     if  text[i] in art:
#         c+=1
# print("Общее количество артиклей:",c)

"""
11.6___Взлом Братства Стали 🌶️
Немалоизвестный в пустошах Мохаве Курьер забрел в Хидден-Вэли – секретный бункер Братства Стали, и любезно соглашается помочь им в решении их проблем. Одной из такой проблем являлся странный компьютерный вирус, который проявлялся в виде появления комментариев к программам на терминалах Братства Стали. Известно, что программисты Братства никогда не оставляют комментарии к коду, и пишут программы на Python, поэтому удаление всех этих комментариев никак не навредит им. Помогите писцу Ибсену удалить все комментарии из программы.

Формат входных данных
На первой строке вводится символ решётки и сразу же натуральное число nn — количество строк в программе, не считая первой. Далее следует nn строк кода.

Формат выходных данных
Нужно вывести те же строки, но удалить комментарии и символы пустого пространства в конце строк. Пустую строку вместо первой строки ввода выводить не надо.
"""
# num_str = input().split('#')[1]
# input_code = [input().split('#')[0].rstrip() for i in range(int(num_str))]
# print(*input_code)

"""
11.6___
Сортировка чисел

На вход программе подается строка текста, содержащая целые числа. 
Из данной строки формируется список чисел. Напишите программу, 
которая сортирует и выводит данный список сначала по возрастанию, а затем по убыванию. 

Формат входных данных
На вход программе подается строка текста, содержащая целые числа, 
разделенные символом пробела.

Формат выходных данных
Программа должна вывести две строки текста в соответствии с условием задачи.
Тестовые данные 🟢

Sample Input:
4 5 1 2 3 8
Sample Output:
1 2 3 4 5 8
8 5 4 3 2 1
"""
# lst = ['4','5', '1', '2', '3', '8']
# lst = list(map(int,lst))
#
# lst.sort()
# print(lst)
# lst.sort(reverse=True)
# print(lst)

"""
11.7___Списочное выражение 1

На вход программе подается натуральное число nn. Напишите программу, использующую списочное выражение, которая создает список содержащий квадраты чисел от 11 до nn, а затем выводит его элементы построчно, то есть каждый на отдельной строке.

Формат входных данных
На вход программе подается натуральное число.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Примечание. Для вывода элементов списка используйте цикл for.

"""
# lst = [int(i)**2 for i in range(1,int(input())+1)]
# print(*lst,sep='\n')

"""
11.7___Списочное выражение 2

На вход программе подается строка текста, содержащая целые числа. Напишите программу, использующую списочное выражение, которая выведет кубы указанных чисел также на одной строке.

Формат входных данных
На вход программе подается строка текста, содержащая целые числа, разделенные символом пробела.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Примечание 1. Для вывода элементов списка используйте цикл for.

Примечание 2. Используйте метод split().
Тестовые данные 🟢

Sample Input 1:

2 4 3

Sample Output 1:

8 64 27
"""
# lst = [int(i)**3 for i in input().split()]
# print(*lst)

"""
11.7___
В одну строку 1

На вход программе подается строка текста, содержащая слова. Напишите программу, которая выводит слова введенной строки в столбик.

Формат входных данных
На вход программе подается строка текста, содержащая слова, разделенные символом пробела.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Примечание. Программу можно написать в одну строку кода.
Тестовые данные 🟢

Sample Input:

Умей ценить того кто без тебя не может

Sample Output:

Умей
ценить
того
кто
без
тебя
не
может

"""
# print(*[i for i in input().split()],sep='\n')

"""
11.7___В одну строку 2
На вход программе подается строка текста. Напишите программу, использующую списочное выражение, которая выводит все цифровые символы данной строки.

Формат входных данных
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Примечание. Программу можно написать в одну строку кода.
Тестовые данные 🟢
Sample Input 1:
Число Pi примерно равно 3.1415
Sample Output 1:
31415
Sample Input 2:
123Python awesome!56
Sample Output 2:
12356
"""
# print(*[i for i in input() if '0' <= i <= '9'], sep='')

"""
11.7___
В одну строку 3

На вход программе подается строка текста, содержащая целые числа. 
Напишите программу, использующую списочное выражение, которая выведет квадраты четных чисел, которые не оканчиваются на цифру 44.

Формат входных данных
На вход программе подается строка текста, содержащая целые числа, разделенные символом пробела.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Примечание. Программу можно написать в одну строку кода.
Тестовые данные 🟢
Sample Input 1:
1 2 3 4 5 6 7 8 9
Sample Output 1:
16 36
Sample Input 2:
4 4 10 6 4
Sample Output 2:
16 16 100 36 16
"""
# print(*[int(i)**2 for i in input().split() if (int(i)**2)%10!=4 and int(i)%2==0])

"""
11.8___Оптимизируйте приведенный код, реализующий алгоритм пузырьковой сортировки.

"""
# a = [17, 24, 91, 96, 67, -27, 79, -71, -71, 58, 48, 88, 88, -16, -78, 96, -76, 56, 92, 1, 32, -17, 36, 88, -61, -97, -37, -84, 50, 47, 94, -6, 52, -76, 93, 14, -32, 98, -65, -16, -9, -68, -20, -40, -71, 93, -91, 44, 25, 79, 97, 0, -94, 7, -47, -96, -55, -58, -78, -78, -79, 75, 44, -56, -41, 38, 16, 70, 17, -17, -24, -83, -74, -73, 11, -26, 63, -75, -19, -13, -51, -74, 21, -8, 21, -68, -66, -84, -95, 78, 69, -29, 39, 38, -55, 7, -11, -26, -62, -84]
#
# n = len(a)
#
# for i in range(n - 1):
#     f = True
#     for j in range(n - i - 1):
#         if a[j] > a[j + 1]:
#             a[j], a[j + 1] = a[j + 1], a[j]
#             f = False
#     if f:
#         break
# print(a)

"""
11.8___Сортировка пузырьком

"""
# a = [5, 1, 8, 2, 4]
# for j in range(len(a)):
#     for i in range(len(a)-1):
#             if a[i]>a[i+1]:
#                 a[i],a[i+1] = a[i+1],a[i]
# print(a)

"""
11.8___Сортировка выбором

"""
# a = [5, 1, 8, 2, 4]
# m = 0
# for i in range(1,len(a)):
#     j = i
#     tmp = a[j]
#     while j > 0 and tmp < a[j-1]:
#         a[j] = a[j-1]
#         j -=1
#     a[j] = tmp
# print(a)
#
#
# numbers = list(range(1, 10, 2))
# for i in numbers:
#     print(i, end='*')



"""
____________________ЭКЗАМЕН_____________________Списки
Список четных

На вход программе подается четное число n, n≥2n,n≥2. Напишите программу, которая выводит список четных чисел
 [2, 4, 6, ..., n].

Формат входных данных
На вход программе подается четное натуральное число.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Тестовые данные 🟢

Sample Input 1:

2

Sample Output 1:

[2]
"""
# print([i for i in range(1,int(input())+1)if i%2==0 ])
"""
Сумма двух списков

На вход программе подаются две строки текста, содержащие целые числа. 
Из данных строк формируются списки чисел L и M. 
Напишите программу, которая создает третий список, 
элементами которого являются суммы соответствующих элементов списков L и M. 
Далее программа должна вывести каждый элемент полученного списка на одной строке через 1 пробел.

Формат входных данных
На вход программе подаются две строки текста, 
содержащие целые числа, разделенные символом пробела.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Примечание. Количество чисел в обеих строках одинаковое.
Тестовые данные 🟢

Sample Input 1:

3 1 4
1 5 9

Sample Output 1:

4 6 13
"""

# a, b = [i for i in input().split()],[i for i in input().split()]
# print(*[int(a[i])+int(b[i]) for i in range(len(a))])


"""
Сумма чисел

На вход программе подается строка текста, содержащая натуральные числа. Напишите программу, которая вставляет между каждым числом знак +, а затем вычисляет сумму полученных чисел.

Формат входных данных
На вход программе подается строка текста, содержащая натуральные числа, разделенные символом пробела.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Примечание. Строковый метод join() работает только со списком строк.
Тестовые данные 🟢

Sample Input 1:

2 5 11 33 55

Sample Output 1:

2+5+11+33+55=106

"""

# a = [i for i in input().split()]
# n = list(map(int,a))
# summa = sum(n)
# print(*[i for i in a],sep='+',end=f"={summa}")


"""
Валидный номер 🌶️🌶️

На вход программе подается строка текста. 
Напишите программу, которая определяет является ли введенная строка корректным телефонным номером. Строка текста является корректным телефонным номером если она имеет формат:
    abc-def-hijk или
    7-abc-def-hijk
где a, b, c, d, e, f, h, i, j, k – цифры от 0 до 9.
Формат входных данных 
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести «YES» если строка является корректным телефонным номером и «NO» в противном случае.

Примечание. Телефонный номер должен содержать только цифры и символ -, а количество цифр в каждой группе должны быть правильным.
Тестовые данные 🟢
Sample Input 1:

7-301-447-5820
Sample Output 1:
YES
Sample Input 2:
301-447-5820
Sample Output 2:
YES
Sample Input 3:
301-4477-5820
Sample Output 3:
NO
Sample Input 4:
3X1-447-5820
Sample Output 4:
NO
Sample Input 5:
3014475820
Sample Output 5:
NO
"""

# n = [i for i in input().split('-')]
# f = 'NO'
# n1 = 0
# for i in range(len(n)):
#     n1 = ''.join(n[i])
#     if n1.isdigit()==True:
#         print("YES")
#     else:
#         print("NO")
#     if '7' in
#
# print(f)


"""

Самый длинный

На вход программе подается строка текста. Напишите программу, использующую списочное выражение, которая находит длину самого длинного слова.

Формат входных данных
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Тестовые данные 🟢

Sample Input:

проспал почти всю ночь

Sample Output:

7

"""
# print(max([len(a) for a in input().split()]))

"""

Молодежный жаргон

На вход программе подается строка текста. Напишите программу, использующую списочное выражение, которая преобразует каждое слово введенного текста в "молодежный жаргон" по следующему правилу: 

    первая буква каждого слова удаляется и ставится в конец слова; 
    затем в конец слова добавляется слог "ки".

Формат входных данных
На вход программе подается строка текста на русском языке.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Тестовые данные 🟢

Sample Input:

проспал почти всю ночь

Sample Output:

роспалпки очтипки сювки очьнки

"""
# print(*[i[1:] + i[0] + "ки"for i in input().split()])

"""
31.1___Звездный прямоугольник 1

Напишите функцию draw_box(), которая выводит звездный прямоугольник с размерами 14×1014×10 в соответствии с образцом:
"""

def draw_box():
    print('**********'
          ,'*        *'
          ,'*        *'
          ,'*        *'
          ,'*        *'
          ,'*        *'
          ,'*        *'
          ,'*        *'
          ,'*        *'
          ,'*        *'
          ,'*        *'
          ,'*        *'
          ,'*        *'
          ,'**********',sep='\n')
# print(*['*        *' if line not in [0, 13] else '*' * 10 for line in range(14)], sep='\n')
"""
13.1___Звездный треугольник 1

Напишите функцию draw_triangle(), 
которая выводит звездный прямоугольный треугольник с катетами, 
равными 10 в соответствии с образцом:
"""
def draw_triangle():
    print(*['*'*star for star in range(1,11)],sep='\n')

"""
13.1___Звездный треугольник

Напишите функцию draw_triangle(fill, base), которая принимает два параметра:

    fill – символ заполнитель;
    base – величина основания равнобедренного треугольника;

а затем выводит его.

Примечание. Гарантируется, что основание треугольника – нечетное число.

"""
# объявление функции
def draw_triangle(fill, base):
    for i in range(1,base+1):
        if i<(base+3)//2:
            print(fill*i)
        else:
            print(fill*(base+1-i))
# считываем данные

fill = '*'
base = 9

# вызываем функцию

"""
13.2___ФИО

Напишите функцию print_fio(name, surname, patronymic), которая принимает три параметра:

    name – имя человека;
    surname – фамилия человека;
    patronymic – отчество человека;

а затем выводит на печать ФИО человека.

Примечание. Предусмотрите тот факт, что все три буквы в ФИО должны иметь верхний регистр.
"""

# объявление функции
def print_fio(name, surname, patronymic):
    print(surname[0].upper(),name[0].upper(),patronymic[0].upper(),sep='')

# считываем данные
# name, surname, patronymic = input(), input(), input()

# вызываем функцию
"""
13.2___Сумма цифр

Напишите функцию print_digit_sum(), которая принимает одно целое число num и выводит на печать сумму его цифр.

"""
# # объявление функции
# def print_digit_sum(num):
#     print(sum([int(i) for i in str(num)]))
# # считываем данные
# n = input()
#
# # вызываем функцию
# print_digit_sum(n)

"""
Практика по функциям
"""
# длинна гипотенузы
def dlinna_hyp(a,b):
    return ((a**2)+(b**2))**0.5
# print('Длинна гипотенузы с катетами 3 и 4 равна',dlinna_hyp(3,4))


"""
13.4___Конвертер километров

Напишите функцию convert_to_miles(km), которая принимает в качестве аргумента расстояние в километрах и возвращает расстояние в милях. 
Формула для преобразования: мили = километры * 0.6214.

Примечание. Следующий программный код:

print(convert_to_miles(1))
print(convert_to_miles(5))
print(convert_to_miles(10))

должен выводить:

0.6214
3.107
6.214

"""
# объявление функции
def convert_to_miles(km):
    return km*0.6214

# считываем данные
# num = int(input())

# вызываем функцию
# print(convert_to_miles(num))

# convert_to_miles(10)

"""
13.4___оличество дней

Напишите функцию get_days(month), которая принимает в качестве аргумента номер месяца и возвращает количество дней в данном месяце.

Примечание 1. Гарантируется, что передаваемый аргумент находится в диапазоне от 1 до 12.

Примечание 2. Считайте, что год является невисокосным.

Примечание 3. Следующий программный код:

print(get_days(1))
print(get_days(2))
print(get_days(9))

должен выводить:

31
28
30

"""
# def get_days(month):
#     mth = [31,28,31,30,31,30,31,31,30,31,30,31]
#     return mth[month+1]
#
# # считываем данные
# num = int(input())
#
# # вызываем функцию
# print(get_days(num))

"""
13.4___Делители 1

Напишите функцию get_factors(num), принимающую в качестве аргумента натуральное число и возвращающую список всех делителей данного числа.

Примечание. Следующий программный код:

print(get_factors(1))
print(get_factors(5))
print(get_factors(10))

должен выводить:

[1]
[1, 5]
[1, 2, 5, 10]

"""

# объявление функции
# def get_factors(num):
#     # nums = [i for i in range(num)]
#     # return [nums[i] for i in range(1,len(nums)) if nums[i]%i==0]
#
#     return [i for i in range(1, num+ 1) if num % i == 0]
#
# # считываем данные
# n = int(input())
#
# # вызываем функцию
# print(get_factors(n))


"""
13.4___лители 2
Напишите функцию number_of_factors(num), принимающую в качестве аргумента число и возвращающую количество делителей данного числа.

Примечание 1. Используйте уже реализованную функцию get_factors(num) из предыдущей задачи.

Примечание 2. Следующий программный код:

print(number_of_factors(1))
print(number_of_factors(5))
print(number_of_factors(10))
должен выводить:

1
2
4

"""
# def get_factors(num):
#     nums = [i for i in range(num)]
#     # return [nums[i] for i in range(1,len(nums)) if nums[i]%i==0]
#
#     return len([i for i in range(1, num+ 1) if num % i == 0])
#
# # считываем данные
# n = int(input())
#
# # вызываем функцию
# print(get_factors(n))


"""
13.4___Найти всех
Напомним, что строковый метод find('a') возвращает местоположение первого вхождения символа a в строке. Проблема заключается в том, что данный метод не находит местоположение всех символов а.

Напишите функцию с именем find_all(target, symbol), которая принимает два аргумента: строку target и символ symbol и возвращает список, содержащий все местоположения этого символа в строке.

Примечание 1. Если указанный символ не встречается в строке, то следует вернуть пустой список.

Примечание 2. Следующий программный код:

print(find_all('abcdabcaaa', 'a'))
print(find_all('abcadbcaaa', 'e'))
print(find_all('abcadbcaaa', 'd'))
должен выводить:

[0, 4, 7, 8, 9]
[]
[4]

"""
# # объявление функции
# def find_all(target, symbol):
#     return [i for i in range(len(target)) if target[i] == symbol]
#
# # считываем данные
# s = 'abcdabcaaa'
# char = 'a'
#
# # вызываем функцию
# print(find_all(s, char))

"""
13.4___Merge lists 1
Напишите функцию merge(list1, list2), которая принимает в качестве аргументов два отсортированных по возрастанию списка, состоящих из целых чисел, и объединяет их в один отсортированный список.

Примечание 1. Списки list1 и list2 могут иметь разную длину.

Примечание 2. Можно использовать списочный метод sort(), а можно обойтись и без него 😎.

Примечание 3. Следующий программный код:

print(merge([1, 2, 3], [5, 6, 7, 8]))
print(merge([1, 7, 10, 16], [5, 6, 13, 20]))
должен выводить:

[1, 2, 3, 5, 6, 7, 8]
[1, 5, 6, 7, 10, 13, 16, 20]

"""
#
# # объявление функции
# def merge(list1, list2):
#
#     return sorted(list1+list2)
#
# # считываем данные
# # numbers1 = [int(c) for c in input().split()]
# # numbers2 = [int(c) for c in input().split()]
#
# # вызываем функцию
# print(merge([1, 2, 3], [5, 6, 7, 8]))

"""
13.4___Merge lists 2
На вход программе подается число nn, а затем nn строк, содержащих целые числа в порядке возрастания. 
Из данных строк формируются списки чисел. Напишите программу, которая объединяет указанные списки в один отсортированный список с помощью функции quick_merge(), а затем выводит его.

Формат входных данных
На вход программе подается натуральное число nn, а затем nn строк, содержащих целые числа в порядке возрастания, разделенные символом пробела.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Тестовые данные 🟢
Sample Input 1:

3
1 2 3 4
5 6 7
10 11 17
Sample Output 1:

1 2 3 4 5 6 7 10 11 17
"""
# def merge(c):
#
#     lists = [input().split() for i in range(c)]
#     uz_list =[]
#     for i in lists:
#         for j in i:
#             uz_list.append(int(j))
#     return sorted(uz_list)
#
# c = int(input())
# print(*merge(c))
#


# lists = [[1,5,8,4],[234,54,34,],[21,67,23]]
# list=[]
# for i in lists:
#     for j in i:
#         list.append(j)
# print([[j for j in i] for i in lists])

# m, p, n = float(input()), float(input()), int(input())
# [print(i + 1, m * (1 + p / 100) ** (i)) for i in range(n)]

"""
13.5

"""

# # объявление функции
# def is_valid_triangle(side1, side2, side3):
#     return a<b+c and b<c+a and c < a +b
#
# # считываем данные
# a, b, c = int(input()), int(input()), int(input())
#
# # вызываем функцию
# print(is_valid_triangle(a, b, c))

"""
31.5___Is a Number Prime? 🌶️
Напишите функцию is_prime(num), которая принимает в качестве аргумента натуральное число и возвращает значение True если число является простым и False в противном случае.

 Примечание. Следующий программный код:

print(is_prime(1))
print(is_prime(10))
print(is_prime(17))
должен выводить:

False
False
True

"""
# # объявление функции
# def is_prime(num):
#     if num == 1:
#         return False
#     for i in range(2,(num**0,5)+1):
#         if num%i == 0:
#             return False
#     return True
#
# # считываем данные
# n = int(input())
#
# # вызываем функцию
# print(is_prime(n))

"""

13.5___Next Prime 🌶️🌶️
Напишите функцию get_next_prime(num), которая принимает в качестве аргумента натуральное число num и возвращает первое простое число большее числа num.

Примечание 1. Используйте функцию is_prime() из предыдущей задачи.

 Примечание 2. Следующий программный код:

print(get_next_prime(6))
print(get_next_prime(7))
print(get_next_prime(14))
должен выводить:

7
11
17
"""
# объявление функции
# def get_next_prime(num):
#     while True:
#         num+=1
#         if is_prime(num)==True:
#             return num
#
# def is_prime(num):
#     if num == 1:
#         return False
#     for i in range(2,num):
#         if num % i == 0:
#             return False
#     return True
#
# n = int(input())
# print(get_next_prime(n))

"""
13.5___Good password 🌶️
Напишите функцию is_password_good(password), 
которая принимает в качестве аргумента строковое значение пароля password и возвращает значение True если пароль является надежным и False в противном случае.

Пароль является надежным если:

его длина не менее 8 символов; 
он содержит как минимум одну заглавную букву (верхний регистр); 
он содержит как минимум одну строчную букву (нижний регистр);
он содержит хотя бы одну цифру.
 Примечание. Следующий программный код:

print(is_password_good('aabbCC11OP'))
print(is_password_good('abC1pu'))
должен выводить:

True
False

"""
def is_password_good(p):

    flag = True
    if len(p)<8:
        return False

    check_upper = 0
    check_lower = 0
    check_isdigit = 0

    for i in range(len(p)):
        if 'a'<=p[i]<='z':
            check_lower+=1
        if 'A'<=p[i]<='Z':
            check_upper+=1
        if '0'<=p[i]<='9':
            check_isdigit+=1
    #
    # upp = [i for i in password if i.isupper()]
    # low = [i for i in password if i.islower()]
    # dig = [i for i in password if i.isdigit()]
    # return all([len(password) >= 8, upp, low, dig])
    #
    if check_upper!=0 and check_lower!=0 and check_isdigit!=0:
        return True
    else:
        return False

# print(is_password_good(''))

# lst = ['aaAA12qqp','aa13AN','aaaaaaaaaaaaa','AAAAAAAAAAA','734638763978653','AAPPqq9S','AABBccssss','AA23423423','dsas233232232','99yyPPgg','99yyPPg','()+_№;%:','aaaaaaA@']

"""
13.5___Ровно в одном
Напишите функцию is_one_away(word1, word2), которая принимает в качестве аргументов два слова word1 и word2 и возвращает значение True если слова имеют одинаковую длину и отличаются ровно в 1 символе и False в противном случае.

 Примечание. Следующий программный код:

print(is_one_away('bike', 'hike'))
print(is_one_away('water', 'wafer'))
print(is_one_away('abcd', 'abpo'))
print(is_one_away('abcd', 'abcde'))
должен выводить:

True
True
False
False


"""
# объявление функции
def is_one_away(word1, word2):
    f = False
    if len(word1)!=len(word2):
        return False

    count = 0
    for i in range(len(word1)):
        if word1[i] != word2[i]:
            count += 1
            if count > 1 or count == 0 :
                return False
            else:
                f = True
    return f
# вызываем функцию
# print(is_one_away('bike', 'hike'))
# print(is_one_away('water', 'wafer'))
# print(is_one_away('abcd', 'abpo'))
# print(is_one_away('abcd', 'abcde'))
# print(is_one_away('abcd1234567', 'abcd1234568'))
# print(is_one_away('abcd', 'abcd'))
# print(is_one_away('aab', 'aba'))
# print(is_one_away('abcd', 'dcba'))

"""
13.5___Палиндром 🌶️
Напишите функцию is_palindrome(text), которая принимает в качестве аргумента строку text и возвращает значение True если указанный текст является палиндромом и False в противном случае.

Примечание 1. Палиндром – это строка, которая читается одинаково в обоих направлениях

Примечание 2. При проверке считайте большие и маленькие буквы одинаковыми, а также игнорируйте пробелы, а также символы , . ! ? -.

Примечание 3. Следующий программный код:

print(is_palindrome('А роза упала на лапу Азора.'))
print(is_palindrome('Gabler Ruby - burrel bag!'))
print(is_palindrome('BEEGEEK'))
должен выводить:

True
True
False

"""

def is_palindrome(text):
    n_text = ''.join([i for i in text.lower() if not i.isspace() and ord(i) in range(97,122) or ord(i) in range(1072,1108)])
    f=True if n_text.replace(' ','').replace('.','') .lower()==n_text.replace(' ','').replace('.','') .lower()[::-1] else False
    return f
# print(is_palindrome('А роза упала на лапу Азора.'))
# print(is_palindrome('Gabler Ruby - burrel bag!'))
# print(is_palindrome('BEEGEEK'))

# a = 'А роза упала на лапу Азора.'.replace(' ','').replace('.','') .lower()
# d = 'А роза упала на лапу Азора.'.replace(' ','').replace('.','') .lower()[::-1]
# print(a,d,sep='\n')
#
# print([i for i in range(ord('а'),ord('я'))])

"""
13.5___BEEGEEK
BEEGEEK наконец открыл свой банк в котором используются специальные банкоматы с необычным паролем.

Действительный пароль BEEGEEK банка имеет вид a:b:c, где a, b и c – натуральные числа. Поскольку основатель BEEGEEK фанатеет от математики, то он решил:

число a – должно быть палиндромом;
число b – должно быть простым;
число c – должно быть четным.
Напишите функцию is_valid_password(password), которая принимает в качестве аргумента строковое значение пароля password и возвращает значение True если пароль является действительным паролем BEEGEEK банка и False в противном случае.

 Примечание. Следующий программный код:

print(is_valid_password('1221:101:22'))
print(is_valid_password('565:30:50'))
print(is_valid_password('112:7:9'))
print(is_valid_password('1221:101:22:22'))

должен выводить:

True
False
False
False

"""

def is_valid_password(password):
    f = False
    c=0

    for i in password:
        if i==':':
            c+=1
            if c>2:
                return False

    t = list(password.split(':'))
    a, b, c = t[0], t[1], t[2]

    # chk_a = 'Палиндром' if a == a[::-1] else 'Не палиндом'
    # chk_b = 'Простое' if int(b) % 2 != 0 else 'Не простое'
    # chk_c = 'Четное 'if int(c) % 2 == 0 else 'Не четное'

    chk_a = True if a == a[::-1] else False
    chk_b = True if int(b) % 2 != 0 else False
    chk_c = True if int(c) % 2 == 0 else False

    return all([chk_a,chk_b,chk_c])

    # return a,b,c,chk_a,chk_b,chk_c

#
# print(is_valid_password('1221:101:22'))
# print(is_valid_password('565:30:50'))
# print(is_valid_password('112:7:9'))
# print(is_valid_password('1221:101:22:22'))

# text ='1221:101:22'.partition(':'[0])
# text ='1221:101:22'
# a = str(text).partition(':'[0])
# b = str(text).rpartition(':'[0])
# print(*a[0:1])
# a = []
# a = [text[i] for i in range(text.index(':'))]
# print(a)
#
# t = list(text.split(':'))
# a,b,c = t[0],t[1],t[2]
# print(a,b,c,sep='\n')



# def is_prime(a):
#     if a % 2 == 0:
#         return a == 2
#     d = 3
#     while d * d <= a and a % d != 0:
#         d += 2
#     return d * d > a
#
# print(is_prime(7))

"""
13.5___Правильная скобочная последовательность 🌶️
Напишите функцию is_correct_bracket(text), которая принимает в качестве аргумента непустую строку text,
состоящую из символов ( и ) и возвращает значение True если поступившая на вход строка является правильной скобочной последовательностью и False в противном случае.

Примечание 1. Правильной скобочной последовательностью называется строка, состоящая только из символов ( и ), где каждой открывающей скобке найдется парная закрывающая скобка.

Примечание 2. Следующий программный код:

print(is_correct_bracket('()(()())'))
print(is_correct_bracket(')(())('))
должен выводить:

True
False

"""

def is_correct_bracket(text):
    f = True
    if text[0]==')'or text[-1]=='(':
        return False

    while '()' in text:
        text = text.replace('()','')
    else:
        return not text
    return f

# print(is_correct_bracket('((()))'))
# print(is_correct_bracket('(()())'))
# print(is_correct_bracket('(())()'))
# print(is_correct_bracket('()(())'))
# print(is_correct_bracket('()()()'))
# print(is_correct_bracket('()(())()()()(())()(()())((()))'))
# print(is_correct_bracket('()(())()(()())((()))()(())'))
# print(is_correct_bracket('())()()()('))
# print(is_correct_bracket(')))((('))
# print(is_correct_bracket('()(())()((())((()))()(())'))
# print(is_correct_bracket('()(())()(()())((()))()(()'))
# print(is_correct_bracket('())(()'))
# print(is_correct_bracket(')))'))
# print(is_correct_bracket('(((('))
# print(is_correct_bracket('())((((())))'))


"""
13.5___
Змеиный регистр
Напишите функцию convert_to_python_case(text), которая принимает в качестве аргумента строку в «верблюжьем регистре» и преобразует его в «змеиный регистр».

Примечание 1. Почитать подробнее о стилях именования можно тут.

Примечание 2. Следующий программный код:

print(convert_to_python_case('ThisIsCamelCased'))
print(convert_to_python_case('IsPrimeNumber'))
должен выводить:

this_is_camel_cased
is_prime_number
"""
def convert_to_python_case(text):
    text = list(text)
    text_p = list(text)
    c = 0
    for i in range(len(text)):
        if text[i].upper()==text[i] and i!=0 and not '0'<=text[i]<='9':
            # print(text[i],i)
            text_p.insert(i+c,'_')
            c+=1
    s = ''.join(text_p)
    return  s.lower()

# print(1,convert_to_python_case('ThisIsCamelCased'))
# print(2,convert_to_python_case('IsPrimeNumber'))
# print(3,convert_to_python_case('ConvertToInt32'))
# print(4,convert_to_python_case('MyMethodThatDoSomething'))

"""
13.6___редина отрезка
Напишите функцию get_middle_point(x1, y1, x2, y2), которая принимает в качестве аргументов координаты концов отрезка (x1,y1)и(x2,y2) 
и возвращает координаты точки являющейся серединой данного отрезка.

"""
def get_middle_point(x1, y1, x2, y2):
    return (x1+x2)/2,(y1+y2)/2
# print(get_middle_point(0, 0, 10, 0))
# print(get_middle_point(1, 5, 8, 3))

"""
13.6___Площадь и длина
Напишите функцию get_circle(radius), 
которая принимает в качестве аргумента 
радиус окружности и возвращает два значения: длину окружности и площадь круга, ограниченного данной окружностью.

"""
from math import pi
def get_circle(r):
    return 2*pi*r,pi*r**2
#
# print(get_circle(1))
# print(get_circle(1.5))

"""
13.6___Корни уравнения 🌶️🌶️
Напишите функцию solve(a, b, c), которая принимает в качестве аргументов три целых числа a, b, c – коэффициенты квадратного уравнения ax^2+bx+c = 0 
2+bx+c=0 и возвращает его корни в порядке возрастания.
"""
def solve(a, b, c):
    d = b**2-4*a*c
    s = []
    if d > 0:
        s.append((-b - d ** 0.5) / (2 * a))
        s.append((-b + d ** 0.5) / (2 * a))
    elif d == 0:
        s.append((-b + d ** 0.5) / (2 * a))
        s.append((-b + d ** 0.5) / (2 * a))

    return sorted(s)
#
#
# print(solve(1, -4, -5))
# print(solve(-2, 7, -5))
# print(solve(1, 2, 1))

"""_____________________ЭКЗАМЕН_14__________________________"""

"""
Звездный треугольник 🌶️
Напишите функцию draw_triangle(), которая выводит звездный равнобедренный треугольник с основанием и высотой равными 1515 и 88 соответственно:

       *
      ***
     *****
    *******
   *********
  ***********
 *************
***************
Примечание 1 . Для вывода треугольника используйте цикл for. 

Примечание 2 . Справа от звездочек пробелов нет.

"""
def triangle():
    for i in range(1,9):
        print(' ' * (8 - i), '*' * i,'*' * (i-1), sep='')

"""
Калькулятор доставки
Интернет магазин осуществляет экспресс доставку для своих товаров
по цене 1000 рублей за первый товар и 120 рублей за каждый последующий товар. Напишите функцию get_shipping_cost(quantity), 
которая принимает в качестве аргумента натуральное число quantity – количество товаров в заказе и возвращает стоимость доставки.

Примечание. Следующий программный код:

print(get_shipping_cost(1))
print(get_shipping_cost(3))
должен выводить:

1000
1240

"""
def get_shipping_cost(quantity):
    return  1000 if quantity == 1 else 1000+quantity*120 - 120
# print(get_shipping_cost(1))
# print(get_shipping_cost(3))

"""
Биномиальный коэффициент 🌶️
Напишите функцию compute_binom(n, k), которая принимает в качестве аргументов два натуральных числа n и k и возвращает значение биномиального коэффициента, равного \dfrac{n!}{k! (n-k)!} 
k!(n−k)!
n!
​
 .

"""
def compute_binom(n, k):

    res = factorial(n)/(factorial(k)*factorial(n-k))
    return int(res)


def factorial(f):
    fn = 1
    for i in range(1,f+1):
        fn*=i
    return fn

# print(compute_binom(100,3))


"""
 Число словами 🌶️
Напишите функцию number_to_words(num), которая принимает в качестве аргумента натуральное число num и возвращает его словесное описание на русском языке.

Примечание 1. Считайте, что число 1 \le num \le 991≤num ≤99.

Примечание 2. Следующий программный код:

print(number_to_words(7))
print(number_to_words(85))
должен выводить:

семь
восемьдесят пять
"""
def number_to_words(num):
    d = {1: 'один', 2: 'два', 3: 'три', 4: 'четыре', 5: 'пять', 6: 'шесть', 7: 'семь', 8: 'восемь', 9: 'девять',
         10: 'десять', 11: 'одиннадцать', 12: 'двенадцать', 13: 'тринадцать', 14: 'четырнадцать', 15: 'пятнадцать',
         16: 'шестнадцать', 17: 'семнадцать', 18: 'восемнадцать', 19: 'девятнадцать', 20: 'двадцать', 30: 'тридцать',
         40: 'сорок', 50: 'пятьдесят', 60: 'шестьдесят', 70: 'семьдесят', 80: 'восемьдесят', 90: 'девяносто'}

    if num<20 or num%10==0:
        return d.get(num)
    else:
        return f'{d.get(num//10*10)} '\
               f'{d.get(num%10)}'

# print(number_to_words(21))
# print(number_to_words(85))

"""
Искомый месяц
Напишите функцию get_month(language, number), которая принимает на вход два аргумента language – язык ru или en и number – номер месяца (от 1 до 12) и возвращает название месяца на русском или английском языке.

Примечание. Следующий программный код:

print(get_month('ru', 1))
print(get_month('ru', 12))
print(get_month('en', 1))
print(get_month('en', 10))
должен выводить:

январь
декабрь
january
october

"""

def get_month(language, number):
    lng_ru = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']
    lng_en = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']

    if language == "ru":
        return lng_ru[number-1]
    else:
        return lng_en[number-1]
#
# print(get_month('ru', 1))
# print(get_month('ru', 12))
# print(get_month('en', 1))
# print(get_month('en', 10))

"""
Магические даты
Магическая дата – это дата, когда день, умноженный на месяц, равен числу образованному последними двумя цифрами года.

Напишите функцию, is_magic(date) которая принимает в качестве аргумента строковое представление корректой даты и 
возвращает значение True если дата является магической и False в противном случае.

Примечание. Следующий программный код:

print(is_magic('10.06.1960'))
print(is_magic('11.06.1960'))
должен выводить:

True
False

"""
def is_magic(date):
    day = int(date[:2])
    month = int(date[3:-5])
    year = date[8:]
    if year[0]!='0':
        year = int(year)
    else:
        year = int(year[1])

    return True if day*month==year else False


# print(is_magic('10.06.1960'))
# print(is_magic('11.06.1960'))


# print('10.06.1960'[8:])
# print('10.06.1960'[:2])
# print('10.06.1960'[3:-5])
#


"""
Панграммы
Панграмма – это фраза, содержащая в себе все буквы алфавита. Обычно панграммы используют для презентации шрифтов, чтобы можно было в одной фразе рассмотреть все глифы.

Напишите функцию, is_pangram(text) которая принимает в качестве аргумента строку текста на английском языке и возвращает значение True если текст является панграммой и False в противном случае.

Примечание 1. Гарантируется, что введенная строка содержит только буквы английского алфавита.

Примечание 2. Следующий программный код:

print(is_pangram('Jackdaws love my big sphinx of quartz'))
print(is_pangram('The jay pig fox zebra and my wolves quack'))
print(is_pangram('Hello world'))
"""
def is_pangram(text):
    return True if len(set(text.replace(' ','').lower()))==26 else False

# print(is_pangram('Jackdaws love my big sphinx of quartz'))
# print(is_pangram('The jay pig fox zebra and my wolves quack'))
# print(is_pangram('Hello world'))

