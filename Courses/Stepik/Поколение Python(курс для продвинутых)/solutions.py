import math

"""2.0 Повторяем основы"""


# 2.1 Часть 1

def na_easy():
    """
    На easy
    На вход программе подаются два целых числа a и b. Напишите программу, которая выводит:
    •	сумму чисел a и b;
    •	разность чисел a и b;
    •	произведение чисел a и b;
    •	частное чисел a и b;
    •	целую часть от деления числа a на b;
    •	остаток от деления числа a на b;
    •	корень квадратный из суммы их 1010-х степеней: 10+10a10+b10.
    """

    a, b = int(input()), int(input())
    print(a + b, a - b, a * b, a / b, a // b, a % b, ((a ** 10) + (b ** 10)) ** 0.5, sep='\n')


def body_mass_index():
    """Напишите программу для вычисления и оценки индекса массы тела (ИМТ) человека.
    ИМТ показывает весит человек больше или меньше нормы для своего роста."""
    mass, hight = float(input()), float(input())
    if (mass / hight ** 2) < 18.5:
        print('Недостаточная масса')
    elif mass / hight ** 2 > 25:
        print('Избыточная масса')
    else:
        print('Оптимальная масса')


def string_price():
    # Дана строка текста. Напишите программу для подсчета стоимости строки, исходя из того, что один любой символ(в том числе пробел) стоит 60 копеек.\
    # Ответ дайте в рублях и копейках в соответствии с примерами.
    # put your python code here

    txt = len(input())
    # txt = 'Я собираюсь сделать ему предложение, от которого он не сможет отказаться.'
    print(int(txt * 0.6), 'р.', math.ceil((txt * 0.6 - int(txt * 0.6)) * 100), 'коп.')


def words_count():
    """Количество слов
    Дана строка, состоящая из слов, разделенных пробелами.
    Напишите программу, которая подсчитывает количество слов в этой строке.
    """
    print((len(input().split())))


def zodiak():
    """Напишите программу, которая считывает год и отображает название связанного с ним животного.
    Ваша программа должна корректно работать с любым годом, не только теми, что перечислены в таблице."""

    ch_year_dic = [
        'Обезьяна',
        'Петух',
        'Собака',
        'Свинья',
        'Крыса',
        'Бык',
        'Тигр',
        'Заяц',
        'Дракон',
        'Змея',
        'Лошадь',
        'Овца', ]
    print(ch_year_dic[int(input()) % 12])


def num_reverse():
    """
    Переворот числа
    Дано пятизначное или шестизначное натуральное число. Напишите программу,
    которая изменит порядок его последних пяти цифр на обратный.

    Формат входных данных
    На вход программе подается одно натуральное пятизначное или шестизначное число.

    Формат выходных данных
    Программа должна вывести число, которое получится в результате разворота, указанного в условии задачи.
    Число нужно выводить без незначащих нулей.
    """
    n1 = input()

    if len(n1) == 5:
        print(int(n1[::-1]))
    else:
        n2 = n1[1::]
        n3 = n1[0]
        print(int(n3 + n2[::-1]))


def standard_american_convention(n):
    """
    Standard American Convention
    На вход программе подаётся натуральное число. Напишите программу,
    которая вставляет в заданное число запятые в соответствии со стандартным американским соглашением о запятых в больших числах.
    Формат входных данных
    На вход программе подаётся натуральное число
    Формат выходных данных
    Программа должна вывести число с запятыми в соответствии с условием задачи.

    :param n:
    :return:
    """
    r = []
    c = 0
    for i in range(1, len(n) + 1):
        r.append(n[0 - i])
        # print(n[0-i], end='')
        c += 1
        if c % 3 == 0:
            r.append(',')
    # print(',', end='')
    r = ''.join(r)
    r = r[::-1]
    if r[0] == ',':
        print(r[1::])
    else:
        print(r)


def j_f():
    """
    n человек, пронумерованных числами от 1 до n, стоят в кругу. Они начинают считаться, каждый
    k-й по счету человек выбывает из круга, после чего счет продолжается со следующего за ним человека.
    Напишите программу, определяющую номер человека, который останется в кругу последним.

    Формат входных данных
    На вход программе подаются два числа
    n и k, записанные на отдельных строках.

    Формат выходных данных
    Программа должна вывести одно число – номер человека, который останется в кругу последним.

    """
    #
    # n, k = int(input()), int(input())
    # s = [i for i in range(1, n + 1)]
    # while len(s) > 1:
    #     for q in range(0, k - 1):
    #         s.append(s[q])
    #     del s[:k]
    # print(*s)

    n, k = int(input()), int(input())
    res = 0
    for i in range(1, n + 1):
        res = (res + k) % i

    print(res + 1)


# 2.2 Часть 2

def coordinate_quarters(str_num):
    """
    Дан набор точек на координатной плоскости. Необходимо подсчитать и вывести количество точек,
    лежащих в каждой координатной четверти.

    Формат выходных данных
    Программа должна вывести количество точек, лежащих в каждой координатной четверти, как в примерах.
    Примечание. Учтите, что точки, лежащие на осях координат, не принято относить к какой-либо координатной четверти.

    """

    c_lst = []
    for i in range(str_num):
        c_lst.append(list(map(int, input().split())))
    # print(c_lst)
    quarters = ['Первая четверть: ', 'Вторая четверть: ', 'Третья четверть: ', 'Четвертая четверть: ']
    for q in quarters:
        r = 0
        res = ''
        for c in c_lst:
            x, y = c[0], c[1]
            if q == quarters[0] and (x > 0 and y > 0):
                r += 1
            elif q == quarters[1] and (x < 0 < y):
                r += 1
            elif q == quarters[2] and (x < 0 and y < 0):
                r += 1
            elif q == quarters[3] and (x > 0 > y):
                r += 1
            res = q + str(r)
        print(res)


def biggest_then_previous():
    """
    Больше предыдущего
    На вход программе подается строка текста из натуральных чисел. Из неё формируется список чисел.
    Напишите программу подсчета количества чисел, которые больше предшествующего им в этом списке числа,
    то есть, стоят вслед за меньшим числом.

    Формат входных данных
    На вход программе подается строка текста из разделенных пробелами натуральных чисел.

    Формат выходных данных
    Программа должна вывести одно число – количество элементов списка, больших предыдущего.

    """
    lst = list(map(int, input().split()))
    c = 0
    for i in range(len(lst) - 1):
        if lst[i] < lst[i + 1]:
            c += 1
    print(c)


def back_forward_change():
    """
    Назад, вперёд и наоборот
    На вход программе подается строка текста из натуральных чисел. Из элементов строки формируется список чисел.
    Напишите программу, которая меняет местами соседние элементы списка (a[0] c a[1], a[2] c a[3] и т.д.).
    Если в списке нечетное количество элементов, то последний остается на своем месте.

    Формат входных данных
    На вход программе подается строка текста, содержащая натуральные числа, разделенные пробелами.

    Формат выходных данных
    Программа должна вывести измененный список, разделяя его элементы одним пробелом.

    """
    # lst = input().split()
    lst = '1 2 3 4 5'.split()
    lst = '2 3 2 4'.split()
    res = []
    for i in range(0, len(lst) - 1, 2):
        print(lst[i + 1], lst[i], sep=' ', end=' ')
        # res.append([lst[i+1],lst[i]])
    if len(lst) % 2 != 0:
        print(lst[-1])


def shift_in_development():
    """
    Сдвиг в развитии
    На вход программе подается строка текста из натуральных чисел. Из элементов строки формируется список чисел.
    Напишите программу циклического сдвига элементов списка направо, когда последний элемент становится первым,
    а остальные сдвигаются на одну позицию вперед, в сторону увеличения индексов.

    Формат входных данных
    На вход программе подается строка текста из разделенных пробелами натуральных чисел.

    Формат выходных данных
    Программа должна вывести элементы измененного списка с циклическим сдвигом, разделяя его элементы одним пробелом.
    """

    lst = '5 4 3 2 1'.split()
    src_len = len(lst)

    res = lst.pop(src_len - 1)
    lst.insert(0, res)
    print(*lst)


def different_elements():
    """
    Различные элементы
    На вход программе подается строка текста, содержащая натуральные числа, расположенные по неубыванию. Из строки формируется список чисел. Напишите программу для подсчета количества разных элементов в списке.

    Формат входных данных
    На вход программе подается строка текста, содержащая натуральные числа, разделенные символом пробела, расположенные по неубыванию.

    Формат выходных данных
    Программа должна вывести одно число – количество различных элементов списка.

    Примечание. Задачу можно решить без множеств.
    """
    lst = '2 2 5 5 5 5 8 10 10'.split()
    print(len(set(lst)))


def multiplication():
    """
    Произведение чисел
    Напишите программу для определения, является ли число произведением двух чисел из данного набора, выводящую результат в
    виде ответа «ДА» или «НЕТ».

    Формат входных данных
    В первой строке подаётся число (0<n<1000)
    n(0<n<1000) – количество чисел в наборе. В последующих n строках вводятся целые числа,
    составляющие набор (могут повторяться).
    Затем следует целое число, которое является или не является произведением двух каких-то чисел из набора.

    Формат выходных данных
    Программа должна вывести «ДА» или «НЕТ» в соответствии с условием задачи.

    Примечание 1. Само на себя число из набора умножиться не может, другими словами,
    два множителя должны иметь разные индексы в наборе.

    Примечание 2. Для решения задачи используйте вложенные циклы.

    """
    flag = 'НЕТ'
    src_lst = [input() for i in range(int(input()))]
    if len(src_lst) <= 1:
        return print(flag)

    mult_d = int(input())

    def find_index(num,lst):
        res = []
        for i in range(0,len(lst)):
            if num == lst[i]:
                res.append(i)
        return res

    for i in range(len(src_lst)):
        for j in range(len(src_lst)):
            if i == j:
                # print(f'{int(src_lst[i])}*{int(src_lst[j])}={int(src_lst[i]) * int(src_lst[j])} ====>>> ПРОПУСКАЕМ')
                continue
            # print(f'{int(src_lst[i])}*{int(src_lst[j])}={int(src_lst[i]) * int(src_lst[j])}')
            if int(src_lst[i])*int(src_lst[j]) == mult_d:
                print('ДА')
                return
    print(flag)


list1 = ['a', 'b', ['c', ['d', 'e', ['f', 'g'], 'k'], 'l'], 'm', 'n']
sub_list = ['h', 'i', 'j']
list1[2][1][2].extend(sub_list)
print(list1)