Более одного объекта используется для представления отсутствия значения.
Это похоже на null в других языках программирования.
Как и другие "пустые" значения, такие как 0, [] и пустая строка, оно равно False при преобразовании в логическую переменную.
При вводе в консоли Python он отображается как пустая строка.

Объект None возвращается любой функцией, которая явно не возвращает ничего другого.
def some_func():
    print("Hi!")

var = some_func()
print(var)

51.3 Dictionaries

    Словари - это структуры данных, используемые для сопоставления произвольных ключей со значениями.
    Списки можно рассматривать как словари с целочисленными ключами в определенном диапазоне.
    Словари можно индексировать так же, как списки, используя квадратные скобки, содержащие ключи.
    Пример:

    ages = {"Dave": 24, "Mary": 42, "John": 58}
    print(ages["Dave"])
    print(ages["Mary"])
    24
    42

    Попытка проиндексировать ключ, который не является частью словаря, возвращает ошибку KeyError.
    Пример:

    primary = {
    "red": [255, 0, 0],
    "green": [0, 255, 0],
    "blue": [0, 0, 255],
    }
    print(primary["red"])
    print(primary["yellow"])

    [255, 0, 0]
    Traceback (most recent call last):
      File "file0.py", line 8, in <module>
        print(primary["yellow"])
    KeyError: 'yellow'

    В качестве ключей к словарям можно использовать только неизменяемые объекты.
    Неизменяемые объекты - это те, которые нельзя изменить.
    Пока что единственные изменяемые объекты, с которыми вы сталкивались, - это
    списки и словари. Попытка использовать изменяемый объект в качестве ключа словаря
    приводит к ошибке TypeError.

    bad_dict = {
        [1, 2, 3]: "one two three",
    }

Dictionary Functions

    Так же, как и списки, ключам словаря могут быть присвоены разные значения.
    Однако, в отличие от списков, новому ключу словаря также может быть присвоено значение, а не только те, которые уже существуют.

    squares = {1: 1, 2: 4, 3: "error", 4: 16,}
    squares[8] = 64
    squares[3] = 9
    print(squares)

    {1: 1, 2: 4, 3: 9, 4: 16, 8: 64}

    primes = {1: 2, 2: 3, 4: 7, 7:17}
    print(primes[primes[4]])
    17

    Чтобы определить, находится ли ключ в словаре,
    вы можете использовать in, и not in, точно так же, как и для списка.

    nums = {
    1: "one",
    2: "two",
    3: "three",
    }
    print(1 in nums)
    print("three" in nums)
    print(4 not in nums)

    True
    False
    True

    Полезным словарным методом является get.
    Он выполняет то же самое, что и индексация,
    но если ключ не найден в словаре, вместо него
    возвращается другое указанное значение (по умолчанию 'None').
    Пример:
    pairs = {1: "apple",
        "orange": [2, 3, 4],
        True: False,
        None: "True",
    }

    print(pairs.get("orange"))
    print(pairs.get(7))
    print(pairs.get(12345, "not in dictionary"))

    [2, 3, 4]
    None
    not in dictionary

55.1 Tuples(Кортежи)

    Кортежи очень похожи на списки, за исключением того, что они неизменяемы (их нельзя изменить).
    Кроме того, они создаются с использованием круглых скобок, а не квадратных.
    Пример:

    words = ("spam", "eggs", "sausages",)

    Кортежи можно создавать без круглых скобок, просто разделяя значения запятыми.
    Пример:

    my_tuple = "one", "two", "three"
    print(my_tuple[0])
    tpl = ()

56.1 List Slices

    Фрагменты списка предоставляют более продвинутый способ извлечения значений из списка.
    Базовая нарезка списка включает в себя индексацию списка двумя целыми числами, разделенными двоеточием.
    Это возвращает новый список, содержащий все значения в старом списке между индексами.
    Пример:

    squares = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
    print(squares[2:6])
    print(squares[3:8])
    print(squares[0:1])

    [4, 9, 16, 25]
    [9, 16, 25, 36, 49]
    [0]

    Как и аргументы для диапазона, первый индекс, указанный
    в срезе, включается в результат, а второй - нет.

    Если первое число в фрагменте опущено, оно принимается за начало списка.
    Если второе число опущено, оно принимается за конечное.
    Пример:

    squares = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
    print(squares[:7])
    print(squares[7:])

    [0, 1, 4, 9, 16, 25, 36]
    [49, 64, 81]

    Фрагменты списка также могут иметь третье число,
    представляющее шаг, чтобы включать в фрагмент только альтернативные значения.

    squares = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
    print(squares[::2])
    print(squares[2:8:3])

    [2:8:3] будет включать элементы, начиная со 2-го индекса до 8-го с шагом 3.

    Отрицательные значения могут использоваться при нарезке списка
    (и обычной индексации списка). Когда для первого и второго значений в срезе
    (или обычного индекса) используются отрицательные значения, они считаются с конца списка.

    squares = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
    print(squares[1:-1])
    [1, 4, 9, 16, 25, 36, 49, 64]
    Если для шага используется отрицательное значение, срез выполняется в обратном направлении.
    Использование [::-1] в качестве среза - это распространенный и идиоматичный способ перевернуть список.

57.1 List Comprehensions

    Понимание списков - это полезный способ быстрого создания списков, содержимое которых подчиняется простому правилу.
    Например, мы можем сделать следующее:

    cubes = [i**3 for i in range(5)]
    print(cubes)
    [0, 1, 8, 27, 64]

    Понимание списка может также содержать оператор if для принудительного выполнения условия для значений в списке.
    Пример:

    evens=[i**2 for i in range(10) if i**2 % 2 == 0]
    print(evens)
    [0, 4, 16, 36, 64]

    Попытка создать список в очень широком диапазоне приведет к ошибке памяти.
    Этот код показывает пример, когда для понимания списка не хватает памяти.
    even = [2*i for i in range(10**100)]
    timeout "$runtime" "$compiler" $file - < "inputFile"

58.1 String Formatting
    До сих пор, чтобы объединить строки и нестроки, вы преобразовали нестроки в строки и добавили их.
    Форматирование строк обеспечивает более эффективный способ встраивания нестроковых элементов в строки. Форматирование строки использует метод форматирования строки для замены ряда аргументов в строке.
    Пример:
    nums = [4, 5, 6]
    msg = "Numbers: {0} {1} {2}". format(nums[0], nums[1], nums[2])
    print(msg)
    Numbers: 4 5 6

    Каждый аргумент функции format помещается в строку в соответствующую позицию, которая определяется с помощью фигурных скобок { }.

    Форматирование строк также может быть выполнено с помощью именованных аргументов.
    Пример:
    a = "{x}, {y}".format(x=5, y=12)
    print(a)
    5, 12

59.1 Useful Functions
    Строковые функции
    Python содержит множество полезных встроенных функций и методов для выполнения общих задач.
    join - соединяет список строк с другой строкой в качестве разделителя.
    replace - заменяет одну подстроку в строке другой.
    startswith и endswith - определяют, есть ли подстрока в начале и конце строки соответственно.
    Чтобы изменить регистр строки, вы можете использовать нижний и верхний регистры.
    Метод split противоположен методу join, превращающему строку с определенным разделителем в список.
    Несколько примеров:

    print(", ".join(["spam", "eggs", "ham"]))
    #prints "spam, eggs, ham"

    print("Hello ME".replace("ME", "world"))
    #prints "Hello world"

    print("This is a sentence.".startswith("This"))
    # prints "True"

    print("This is a sentence.".endswith("sentence."))
    # prints "True"

    print("This is a sentence.".upper())
    # prints "THIS IS A SENTENCE."

    print("AN ALL CAPS SENTENCE".lower())
    #prints "an all caps sentence"

    print("spam, eggs, ham".split(", "))
    #prints "['spam', 'eggs', 'ham']"

    spam, eggs, ham
    Hello world
    True
    True
    THIS IS A SENTENCE.
    an all caps sentence
    ['spam', 'eggs', 'ham']

    Чтобы найти максимум или минимум некоторых чисел или списка, вы можете использовать max или min.
    Чтобы найти расстояние числа от нуля (его абсолютное значение), используйте abs.
    Чтобы округлить число до определенного количества знаков после запятой, используйте round.
    Чтобы найти общее количество в списке, используйте sum.

    print(min(1, 2, 3, 4, 0, 2, 1))
    print(max([1, 4, 9, 2, 5, 6, 8]))
    print(abs(-99))
    print(abs(42))
    print(sum([1, 2, 3, 4, 5]))

    0
    9
    99
    42
    15

    Часто используемые в условных операторах all и any принимают список в
    качестве аргумента и возвращают значение True, если все или какой-либо
    (соответственно) из их аргументов принимает значение True (и False в противном случае).
    Функция enumerate может использоваться для одновременного перебора значений и индексов списка.
    Пример:

    nums = [55, 44, 33, 22, 11]

    if all([i > 5 for i in nums]):
        print("All larger than 5")

    if any([i % 2 == 0 for i in nums]):
        print("At least one is even")
    for v in enumerate(nums):
        print(v)

    All larger than 5
    At least one is even
    (0, 55)
    (1, 44)
    (2, 33)
    (3, 22)
    (4, 11)

60.1 Text Analyzer
    Это пример проекта, показывающий программу, которая анализирует образец файла, чтобы определить, какой процент текста занимает каждый символ.
    В этом разделе показано, как файл может быть открыт и прочитан.
    filename = input("Enter a filename: ")

    with open(filename) as f:
       text = f.read()

    print(text)

    Эта часть программы показывает функцию, которая подсчитывает, сколько раз символ встречается в строке.

    def count_char(text, char):
    count = 0
    for c in text:
        if c == char:
            count += 1
    return count

    Эта функция принимает в качестве своих аргументов текст файла и один символ, возвращая количество раз, когда этот символ появляется в тексте.
    Теперь мы можем вызвать его для нашего файла.

    filename = input("Enter a filename: ")
    with open(filename) as f:
      text = f.read()
    print(count_char(text, "r"))

    Символ "r" появляется в файле 83 раза.

    Следующая часть программы определяет, какой процент текста занимает каждый символ алфавита.
    for char in "abcdefghijklmnopqrstuvwxyz":
      perc = 100 * count_char(text, char) / len(text)
      print("{0} - {1}%".format(char, round(perc, 2)))

    def count_char(text, char):
        count = 0
        for c in text:
            if c == char:
                count += 1
        return count

    file = open("newfile.txt", "w")
    file.write("""Ornhgvshy vf orggre guna htyl.
    Rkcyvpvg vf orggre guna vzcyvpvg.
    Fvzcyr vf orggre guna pbzcyvpngrq.
    Syng vf orggre guna arfgrq.
    Fcenfr fv orggre guna qrafr.
    Ernqnovyvgl pbhagf.
    Fcrpvny pnfrf nera'g fcrpvny rabthu gb oernx gur ehyrf.
    Nygubhtu cenpgvpnyvgl orgnf chevgl.
    Reebef fubhyq arire cnff fvyragyl.
    Hayrff rkcyvpvgyl fvyraprq.
    Va gur snpr bs nzovthvgl, ershfr gur grzcgngvba bg thrff.
    Gurer fubhyq or bar-- naq cersrenoylbayl bar --boivbhf jnl gb qb vg.
    Nygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh'er Qhgpu.
    Abj vf orggre guna arrire.
    Nygubhtu arire vf bsgra orggre guna *evtug* abj.
    Vs gur vzcyrzragngvba vf uneq gb rkcynva, vg'f n onq vqrn.
    Vs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn.
    Anzrfcnprf ner bar ubaxvat terng vqrn -- yrg'f qb zber bs gubfr!""")
    file.close()
    filename = "newfile.txt"
    with open(filename) as f:
        text = f.read()

    for char in "abcdefghijklmnopqrstuvwxyz":
        perc = 100 * count_char(text, char) / len(text)
        print("{0} - {1}%".format(char, round(perc, 2)))


    a - 4.68%
    b - 4.94%
    c - 2.28%
    d - 0.0%
    e - 3.8%
    f - 5.19%
    g - 8.99%
    h - 2.53%
    i - 0.63%
    j - 0.51%
    k - 0.51%
    l - 1.9%
    m - 0.0%
    n - 6.2%
    o - 2.28%
    p - 1.9%
    q - 2.03%
    r - 10.51%
    s - 1.27%
    t - 1.39%
    u - 3.54%
    v - 6.08%
    w - 0.0%
    x - 0.25%
    y - 3.92%
    z - 1.65%

