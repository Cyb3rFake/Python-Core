# coding=utf8

# letters = ["a", "b", "c"]
# letters.append("d")
# print(len(letters))
# print(letters)
#
# nums = [1, 2, 3]
# nums.append(4)
# print(nums)

# nums = [9, 8, 7, 6, 5]
# nums.append(4)
# nums.insert(2, 11)
# print(len(nums))
# print(nums)



# passwd = "jopa"
# conf = "jopa"
# if passwd == conf:
#     print("Пароль принят")
# else:
#     print("Пароль не принят")


# n = 7911
# n1 = (n//1000)
# n2 = (n//100%10)
# n3 = (n//10%10)
# n4 = (n%10)
# if n1 + n4 == n2 - n3:
#     print("ДА")
# else:
#     print("НЕТ")

# age = int(input())
# if age >= 18:
#     print("Доступ разрешен")
# else:
#     print("Доступ запрещен")

# a = int(input())
# b = int(input())
# c = int(input())
# step = b - a
# if step + b == c:
#     print("YES")
# else:
#     print("NO")

# a = int(input())
# b = int(input())
# if a < b:
#     print(a)
# else:
#     print(b)

# херня не работает
# a = [10,9,11,12]
# a = []
# i = 0
# while i<4:
#     a.append(input())
#     i = i + 1
# print(min(a))

# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
# n1, n2 = 0, 0
# if a < b:
#     n1 = a
# else:
#     n1 = b
# if c < d:
#     n2 = c
# else:
#     n2 = d
#
# if n1 < n2 :
#     print(n1)
# else:
#     print(n2)

# до 13 включительно – детство;
# от 14 до 24 – молодость;
# от 25 до 59 – зрелость;
# от 60 – старость.
#
# age =60
# if age<=13:
#     print("детство")
# elif age >=14 and age <=24:
#     print("молодость")
# elif age >=25 and age <=59:
#     print("зрелость")
# elif age >= 60:
#     print("старость")


# a = 4
# b =-22
# c = 1
# sum = 0
# if a>=0:
#     sum = sum + a
# if b>=0:
#     sum =sum + b
# if c>=0:
#     sum = sum + c
# print(sum)

# a, b = int(input()), int(input())
# if a > b:
#     print("NO")
# elif a < b:
#     print("YES")
# else:
#     print("Don't know")

# a = -44
# if a <= -3 or a >= 7:
#     print('Принадлежит')
# else:
#     print('Не принадлежит')

# a = -10
# if  a > -30 and a <= -2 or a > 7 and a <= 25 :
#     print('Принадлежит')
# else:
#     print('Не принадлежит')

# x = 1045
# if (x>=1000 and x<=9999):
#     if x%7 == 0 or x%17 == 0:
#
#         print("YES")
#     else:
#         print("NO")
# else:
#     print("NO")


# a, b, c, = int(input()),int(input()),int(input())
# a, b, c, = 3, 4, 6
#
# if a<b+c and b<c+a and c < a +b:
#     print("YES")
# else:
#     print("NO")

# x=2012
# if (x%4==0 and x%100 !=0) or x%400==0:
#     print("YES")
# else:
#     print("NO")

# x1 = int(input("x1= "))
# y1 = int(input("y1= "))
# x2 = int(input("x2= "))
# y2 = int(input("y2= "))
# x = x2 - x1  # разность координат по оси x
# y = y2 - y1  # разность координат по оси y
# if x1==x2 or y1==y2:
#     print('YES')
# else:
#     print('NO')


# x1 = int(input("x1= "))
# y1 = int(input("y1= "))
# x2 = int(input("x2= "))
# y2 = int(input("y2= "))
# x = x2 - x1  # разность координат по оси x
# y = y2 - y1  # разность координат по оси y
# if -1<=x<=1 and -1<=y<=1:
#     print('YES')
# else:
#     print('NO')

# list = [2, 3, 4, 5, 6, 7]
#
# for x in list:
#     if(x%2==1 and x>4):
#         print(x)
#         break

# a,b,c = int(input()),int(input()),int(input())
# if a == b and b == c:
#     print("Равносторонний")
# elif a == b or b == c or c == a:создание номенклатуры в 1с по прототипу
#     print("Равнобедренный")
# else:
#     print("разносторонний")

# a,b,c = int(input()),int(input()),int(input())
# if a<b<c and a<c:

# x = int(input())
# lst1 = [1,3,5,7,8,10,12]
# lst2 = [4,6,9,11]
# if x in lst1:
#     print(31)
# elif x in lst2:
#     print(30)
# else:
#     print(28)

# x = int(input())
# if 60 > x :
#     print("Легкий вес")
# if 60 <= x < 64:
#     print("Первый полусредний вес")
# if 64 <= x < 69:
#     print("Полусредний вес")


# a = 25
# b = 5
# c = "*"
#
# if b==0 and c == "/":
#     print("На ноль делить нельзя!")
# elif c == "/" and b!=0 :
#     print(a/b)
# elif c == "*":
#     print(a*b)
# elif c == "+":
#     print(a+b)
# elif c == "-":
#     print(a-b)
# else:
#     print("Неверная операция")

#
# c1 = "желтый"
# c2 = "красный"
#
# if (c1 == "красный" and c2 == "синий") or (c2 == "красный" and c1 == "синий"):
#     print("фиолетовый")
# elif (c1 == "красный" and c2 == "желтый") or (c2 == "красный" and c1 == "желтый"):
#     print("оранжевый")
# elif (c1 == "синий" and c2 == "желтый") or (c2 == "синий" and c1 == "желтый"):
#     print("зеленый")
# elif (c1 == "синий" and c2 == "синий"):
#     print("синий")
# elif (c1 == "желтый" and c2 == "желтый"):
#     print("желтый")
# elif (c1 == "красный" and c2 == "красный"):
#     print("красный")
# else:
#     print("ошибка цвета")

# c = 36
#
# if c in range(0,37):
#     if c == 0:
#         print("зеленый")
#     elif  1 <= c <= 10:
#         if c%2!=0:
#             print("красный")
#         else:
#             print("черный")
#     elif  11 <= c <= 18:
#         if c%2!=0:
#             print("черный")
#         else:
#             print("красный")
#     elif  19 <= c <= 28:
#         if c%2!=0:
#             print("красный")
#         else:
#             print("черный")
#     elif  29 <= c <= 36:
#         if c%2!=0:
#             print("черный")
#         else:
#             print("красный")
# else:
#     print("ошибка ввода")


# a1 = 1
# b1 = 3
# a2 = 2
# b2 = 4
# if (a1 < a2 and b1 < b2) or (a1 > a2 and b1 > b2) or (a1 > a2 and b2 < b1) or (a1 > a2 and b2 > b1):
#     print("пустое множество")
# elif (a1 < a2 and b1 < b2):
#     print(a2,b1)
# elif (a1 > a2 and b1 > b2):
#     print(a1,b2)
# elif (a1 < a2 and a2 == b2):
#     print(b1,a2)
# elif (a2 < a1 and a1 == b2):
#     print(b2,a1)
# elif a1 == a2 and b1 == b2:
#     print(a1,b1)
# elif a1 == a2 and b1 < b2:
#     print(a1)
# elif a1 > a2 and b2==b1
#     print(b1)

# if a2 > b1 or a1 > b2:
#     print('пустое множество')
# elif a1 == b2:
#     print(a1)
# elif a2 == b1:
#     print(a2)
# else:
#     if a1 > a2:
#         a2 = a1
#     if b1 < b2:
#         b2 = b1
#     print(a2, b2)

# c = int(input())
#
# if c%100==0:
#     print("YES")
# else:
#     print("NO")

# x1 = 1
# x2 = 1
# y1 = 2
# y2 = 6
# if (x1+x2+y1+y2)%2==0:
#     print("YES")
# else:
#     print("NO")

# a =int(input())
# s = str(input())
# if 10<=a<=15 and s =="f":
#     print("YES")
# else:
#     print("NO")

# c = 2
# # c = int(input())
# if c % 2 != 0:
#     print("YES")
# elif c % 2 == 0 and 2 <= c <= 5:
#     print("NO")
# elif c % 2 == 0 and 6 <= c <= 20:
#     print("YES")
# elif c % 2 == 0 and c > 20:
#     print("NO")

# x1 = 4
# x2 = 4
# y1 = 5
# y2 = 5

# if (x1-y1)==(x2-y2) or (x1+y1)==(x2+y2):
#     print("YES")
# else:
#     print("NO")


#
# if (abs(x1-x2)==1 and abs(y1-y2)==2) or (abs(x1-x2)==2 and abs(y1-y2)==1):
#     print("YES")
# else:
#     print("NO")

#
# def shout(word):
#    return word + "!"
# speak = shout
# output = speak("shout")
# print(output)

# def add(x, y):
#     return x + y
# def do_twice(func, x, y):
#     return func(func(x, y), func(x, y))
# a = 5
# b = 10
# print(do_twice(add, a, b))
#
# def func(x):
#   res = 0
#   for i in range(x):
#      res += i
#   return res
# print(func(4))


# a = 5
# b = 8
# c = 3
#
# x = [a,b,c]
# x = sorted(x,reverse=True)
# for i in range(len(x)):
#     print(x[i])



# n = "945"
# m = [num for num in n]
#
# minimal = min(m)
# maximal = max(m)
#
# s = sorted(m)
# srednee = (s[1])
# raz = int(maximal) - int(minimal)
# print(f"максимальное минус минимальное = {raz}")
# print(f"среднее = {srednee}")
# if int(raz) == int(srednee):
#     print("Пизда как интересно")
# else:
#     print("Пизда как не интересно")


# sum = 0
# a = [5.4,33,-1232,-3.889,6]
# for i in range(len(a)):
#     sum =+ abs(float(a[i]))
# print(sum)

# try:
#   num1 = input(":")
#   num2 = input(":")
#   print(float(num1)/float(num2))
# except():

# file = open("5_Exceptions & Files/Notes", encoding='utf-8', mode='a')
# cont = file.write("jopahuipizda")
# file = open("5_Exceptions & Files/Notes", encoding='utf-8', mode='r')
# cont1 = file.read(-1)
# print(cont1)
# file.close()

# p1, p2, q1, q2 = 10, 15, 21, 13
# print(int(abs(p1-q1)+abs(p2-q2)))
#
# str1 = '1'
# str2 = str1 + '2' + str1
# str3 = str2 + '3' + str2
# str4 = str3 + '4' + str3
# print(str4)
#
# mystr = '123' * 3 + '456' * 2 + '789' * 1
# print(mystr)


#print("\"Python is a great language!\", said Fred. \"I don't ever remember having this much fun before.\"")

# firstname = input()
# lastname = input()
# print(f"Hello {firstname} {lastname}! You just delved into Python.")

# name = input()
# count = len(name)
# print(f"Футбольная команда {name} имеет длину {count} символов")

"""
Даны названия трех городов. Напишите программу, которая определяет самое короткое и самое длинное название города.

Формат входных данных
На вход программе подаётся названия трех городов, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести самое короткое и длинное название города, каждое на отдельной строке.

Примечание. Гарантируется, что длины названий всех трех городов различны.


# a = [input() for x in range(3)]
a = ["Москва",
     "Санкт-Петербург",
     "Екатеринбург"]
b = [len(a[i]) for i in range(3)]

x ={}
for i in range(3):
    x[b[i]] = a[i]
print(x)

Min = (min(x.items()))
Max = (max(x.items()))

print(Min[1])
print(Max[1])
"""
#
# from random import random
#
# data = []
# for j in range(10):
#     data.append(int(random()*100))
# print(data)
# print(sorted(data))
# mx = 0
# mn = 99999
#
# for i in data:
#     print(i)
#     if i > mx:
#         mx = i
#
#
#
# print(f"максимум {mx}")
#
# j = "ж"
# a = "a"
# print(j<a)
#
#
# print(ord("a"))
# print(ord("A"))
#
import os
"""сортировка пузырьком"""
"""
print("сортировка пузырьком")
dat = [15,8,4,3,8,2]
count = 0
print(dat)
for j in range(len(dat)-1):
    for i in range(len(dat)-1):
         if dat[i]>dat[i+1]:
             count +=1
             dat[i],dat[i+1] = dat[i+1],dat[i]
    print(dat)
print("количеств проходов ",count, "\n")


print("сортировка хуем")
mx = -9999
count1 = 0
for i in dat:
    if i > mx:
        mx = i
    count1 +=1
print(dat)
"""


# if "синий" in input(""):
#     print("YES")
# else:
#     print("NO")


# x1 = 2.0
# y1 = 2.5
# x2= 44.155
# y2 = 100.50
#
# print(math.sqrt(((x1-x2)**2)+((y1-y2)**2)))
# r = 554.6
# print(math.pi*r**2)
# print(2*math.pi*r)
#
# m = int(input())
# p = int(input())
# n = int(input())
#
# for i in range(n):
#     print("i",m*(p/100 +1)**i)

# a = 12
# b = -5
# if a<b:
#     [print(x) for x in range(a,b+1,1)]
# elif a == b :
#     print(a)
# else:
#     [print(x) for x in range(a,b-1,-1)]


# a = 1
# b = 20
# d = []
# for x in range(a, b+1, 1):
#
#     if x % 15 == 0 or x%17==0 or x%10==9:
#         d.append(x)
#         print(x)

# n = 5
# [print(f"{n} x {i} =", n*i) for i in range(1,11,1)]

# a = 20
# b = 23
# c = 0
# for i in range(a,b+1,1):
#     if i**3 % 10==4 or i**3 % 10==9:
#         c += 1
# print(c)

# a = int(input())
# d = [input() for i in range(a)]
# j = 0
# print(d)
#
# for i in range(len(d)):
#     j = j + int(d[i])
#     print(d[i])
# print(j)


# n = int(input())
# n = 10
# m =[]
# for i in range(1,n+1,1):
#     m.append(1/i)
# print(m)
#
# j = 0
# for i in range(len(m)):
#     j += m[i]
# print("сумма массива без логорифма ", j)
# print(j - math.log(n))

# c = int(input())
# a = [input() for i in range(1,c+1)]
# a = [9,7,5,4,3,2,78,1]
# mx = -888
# sr = 99999
#
# for i in range(len(a)):
#     if a[i] > mx:
#         mx=a[i]
# a.remove(mx)
# a = sorted(a)
# print(max(a))
#
# a = [i for i in range(1,21)]
# a = [i for i in range(2,21,2)]
# # a = [2,2,2,2,2,2,7,4,4,4,4]
# t = 0
# print(a)
# for i in range(len(a)):
#     if a[i]%2==0:
#         t += 1
# if t<10:
#     print("NO")
# elif t==10:
#     print("YES")



# n = 5678
# count = 0
# while n != 0:
#     lst = n % 10
#     n //= 10
#     count +=1
#     if count :
#         frst = n
#
# print(frst)
# print(count)


# n = 455672
# while n>9:
#     if 99>n>9:
#         # print(n % 10)
#         print(n%10)
#     n //= 10


# n = 1111111111
# lst = n % 10
# f = "YES"
# while n!=0:
#     if n%10!=lst:
#         f = "NO"
#     n //=10
# print(f)


# n = 6543211
# f = True
# lst = n%10
# while n!=0:
#     n = n//10
#     if n == 0:
#         break
#     if lst<=n%10:
#         f == True
#     elif lst>n%10:
#         f = False
#         break
#     print(lst,"<",n%10, lst<n%10)
#     lst = n%10
# if f == True:
#     print("YES")
# else:
#     print("NO")

# mult = 1
# for i in range(1, 11):
#    if i % 2 == 0:
#       continue
#    if i % 9 == 0:
#       break
#    mult *= i
# print(mult)

# n = 1
# for i in range(1,n+1):
#     if  5<=i<=9:
#         continue
#     elif  17<=i<=37:
#         continue
#     elif  78<=i<=87:
#         continue
#     print(i)

# import re
#
# s = ['Яблоко', 'яБлоко', 'ябЛоко', 'яблОко', 'яблоКо', 'яблокО']
#
# result = re.search('Яб',s)
# print(result)

# n = 100
# sum = 0
# for i in range(1,n+1,1):
#     if (i**2)%10==2 or (i**2)%10==5 or (i**2)%10==8:
#        sum += i
# print(sum)

# n = 3
# sum = 1
# for i in range(1,n+1,1):
#        sum *= i
# print(sum)

# m = [input() for i in range(1,11,1)]

# m =[8,0,1,2,1,0,0,5,4,12]
# mult = 1
# for i in range(len(m)):
#     if int(m[i]) != 0:
#         mult = mult * int(m[i])
# print(mult)

# n = 10
# sum = 0
# for i in range(1,n+1,1):
#     if n % i==0:
#         sum += i
# print(sum)

# n = 5
# c = -1
# sum = 0
# for i in range(1,n+1,1):
#     if i%2 !=0:
#         sum += i
#     else:
#         sum -= i
# print(sum)
# import time


# fib1 = fib2 = 1
# n = int(input())
# if n==1:
#     print(fib1, end=' ')
# else:
#     print(fib1, fib2, end=' ')
#
# for i in range(2, n):
#     fib1, fib2 = fib2, fib1 + fib2
#     print(fib2, end=' ')

# i = str(input())
# c = 0
# while (i != "стоп" and i != "хватит" and i != "достаточно") :
#     c+=1
#     i = str(input())
# print(c)

# i = int(input())
# while i%7==0:
#     print(i)
#     i = int(input())

# i = int(input())
# c = 0
# while i>=0:
#     c += i
#     i = int(input())
# print(c)

# i = int(input())
# c = 0
# while 5 >= i > 0:
#     if i == 5 :
#         c += 1
#     i = int(input())
# print(c)

# n = int(input())
# c = 0
# while n>=25:
#     c +=1
#     n = n - 25
# while n >= 10:
#     c += 1
#     n = n - 10
# while n >= 5:
#     c += 1
#     n = n - 5
# while n >= 1:
#     c += 1
#     n = n - 1
# print(c)

# n = int(input())
# while n != 0:  # пока в числе есть цифры
#     last_digit = n % 10  # получить последнюю цифру
#     # код обработки последней цифры
#     n = n // 10  # удалить последнюю цифру из числа


# num = 123456789
# total = 0
# while num != 0:
#     last_digit = num % 10
#     if last_digit > 4:
#         total += 1
#     num = num // 10
# print(total)

# n=9673210458
# print(n%10)
# while n != 0:
#     last = n%10
#     n //= 10
#     print(last)


# n = str(input())
# sum = 0
# proizv = 1
# for i in range(0,len(n),1):
#
#     sum += int(n[i])
#     proizv *= int(n[i])
# print(sum)
# print(len(n))
# print(proizv)
# print(sum/len(n))
# print(n[0])
# print(int(n[0])+int(n[3]))

# n = 123
# product = n % 10
# while n != 0:
#     digit = n % 10
#     n //= 10
#     product = product * digit
#
# print(product)

# counter = 0
# for i in range(99, 102):
#     temp = i
#     while temp > 0:
#         counter += 1
#         temp //= 10
# print(counter)

# n = int(input())
# for i in range(n):
#     print()
#     for j in range(3):
#         print(n,end=" ")

# n = int(input())
# for i in range(1,n+1):
#     print()
#     for j in range(1,10):
#         print(f"{i} + {j} =",i+j)
#

# n = 5
# for i in range(1,n+1):
#     print()
#     for j in range(1,i+1):
#         print(i, end="")


"""# //12x+13y=777."""
# total = 0
# for x in range(1, 65):
#     for y in range(1, 60):
#         if 12 * x + 13 * y == 777:
#             total += 1
#             print('x =', x, 'y =', y)
# print('Общее количество натуральных решений =', total)


"""# 28n+30k+31m=365 найти минимальное значение n"""
# for n in range(1,100):
#     for k in range(1,100):
#         for m in range(1,100):
#             if 28 * n + 30 * k +31 * m ==365:
#                 print("n=",n)
#                 print("k=",k)
#                 print("m=",m, "\n")
#                 break

"""Имеется 100100 рублей. 
Сколько быков, коров и телят можно купить на все эти деньги, 
если плата за быка – 1010 рублей, за корову – 55 рублей, 
за теленка – 0.50.5 рубля и надо купить 100100 голов скота?"""
# for b in range(0,100):
#     for c in range(0,100):
#         for l in range(0,100):
#             if 10*b + 5*c + 0.5*l == 100 and b+c+l == 100:
#                 print("быков=",b)
#                 print("коров=",c)
#                 print("ягнят=",l, "\n")
#                 break

""" a^5 + b^5 +c^5 + d^ 5 = e^5 """
# for a in range(0,150):
#     for b in range(0,150):
#         for c in range(0,150):
#             for d in range(0,150):
#                 for e in range(0,150):
#                     if math.pow(a,5)+math.pow(b,5)+math.pow(c,5)+math.pow(d,5) == math.pow(e,5) :
#                         print(a+b+c+d+e)
#                         break

"""Численный треугольник 3
Дано натуральное число nn. Напишите программу, которая печатает численный треугольник с высотой равной nn, в соответствии с примером:

3

1
2 3
4 5 6
"""

# n = 10
# c = 0
# for i in range(1,n+1):
#     print()
#     for j in range(1,i+1):
#         c += 1
#         print(c, end=" ")


# [print(*range(1, n + 1), *range(n - 1, 0, -1), sep='') for n in range(1, int(input("SOSITE HUI ")) + 1)]

"""
На вход программе подается два натуральных числа a и b (a< b). Напишите программу, которая находит натуральное число из отрезка [a;b] с максимальной суммой делителей.

Формат входных данных
На вход программе подаются два числа, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести два числа на одной строке, разделенных пробелом: число с максимальной суммой делителей и сумму его делителей.

Примечание. Если таких чисел несколько, то выведите наибольшее из них.

Sample Input 1:
1
10
Sample Output 1:
10 18
"""
# a, b = int(input()),int(input())
# a, b = 1,10
# sum = 0
# max_sum = 0
# count = 0
# for i in range(b,a-1,-1):
#     print()
#     sum = 0
#     for j in range(1,i+1):
#         if i % j==0:
#             sum += j
#             print(j,end=" ")
#         if max_sum<sum:
#             max_sum=sum
#             count =i
#
#     print("sum=",sum)
#
# print(count,"max= ",max_sum)


# a, b = 1,10
# sum = 0
# max_sum = 0
# count = 0
# for i in range(b,a-1,-1):
#     sum = 0
#     for j in range(1,i+1):
#         if i % j==0:
#             sum += j
#         if max_sum<sum:
#             max_sum=sum
#             count =i
# print(count,max_sum)

"""
На вход программе подается натуральное число nn. 
Напишите программу, выводящую графическое изображение делимости чисел от 11 до nn включительно. 
В каждой строке надо напечатать очередное число и столько символов «+», сколько делителей у этого числа.

Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести графическое изображение чисел от 11 до nn, каждое на отдельной строке.
Тестовые данные 
Sample Input:
5
Sample Output:
1+
2++
3++
4+++
5++
"""
# n = 5
# for i in range(1,n+1):
#     c = 0
#     for j in range(1,i+1):
#         if i % j==0:
#             c += 1
#     print(i,"+"*c, sep="")

"""
На вход программе подается натуральное число nn. Напишите программу, которая находит цифровой корень данного числа. Цифровой корень числа nn получается следующим образом: если сложить все цифры этого числа, затем все цифры найденной суммы и повторить этот процесс, то в результате будет получено однозначное число (цифра), которое и называется цифровым корнем данного числа.

Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести цифровой корень введенного числа.

Примечание. Используйте вложенные циклы while.

Sample Input:
192
Sample Output:
3
"""
# n = int(input())
# sum = 0
# while n>9:
#     sum = 0
#     while n>0:
#         last_digit = n %10
#         sum += last_digit
#         n = n //10
#     else:
#         n = sum
# print(n)

"""
Сумма факториалов
Дано натуральное число nn. Напишите программу, 
которая выводит значение суммы 1!+2!+3!+\ldots+n!1!+2!+3!+…+n!.

Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести значение суммы 1!+2!+3!+\ldots+n!1!+2!+3!+…+n!.

Примечание 1. Факториалом натурального числа nn, 
называется произведение всех натуральных чисел от 11 до nn, то есть
"""
# # n = int(input())
# n = 2
# m = 1
# s = 0
# for i in range(1,n+1):
#     m *= i
#     s +=m
# print(s)
#
# print(0.1+0.2)


"""
Простые числа
На вход программе подается два натуральных числа a и b (a< b). 
Напишите программу, которая находит все простые числа от a до b включительно.

Формат входных данных
На вход программе подаются два числа, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести все простые числа от aa до bb включительно, каждое на отдельной строке.

Примечание. Число 11 простым не является.
Тестовые данные
Sample Input 1:
2
15
"""

# # a,b = int(input()),int(input())
# a,b = 1,15
# c = 0
# for i in range(a,b+1):
#     c = 0
#
#     for j in range(1,i+1):
#         if i % j==0:
#             c += 1
#     if c==2:
#         print(i)
#
#
# for i in range(10, 5, -1):
#     print(i,end=" ")


"""=========================================9=========================================="""
"""9.1
Дополните приведенный код, используя индексатор, так чтобы он вывел символ запятой.    
"""
# s = "In 2010, someone paid 10k Bitcoin for two pizzas."
# print(s[7])
"""
Дополните приведенный код, используя индексатор, так чтобы он вывел символ w.
"""
# s = "In 2010, someone paid 10k Bitcoin for two pizzas."
# for i in s:
#     if i == "w":
#         ind = s.index(i)
# print(s[ind])
"""
В столбик 1
На вход программе подается одна строка. Напишите программу, которая выводит элементы строки с индексами 0, 2, 4, ... в столбик.
Формат входных данных
На вход программе подается одна строка.
Формат выходных данных
Программа должна вывести элементы строки с индексами 0, 2, 4, ..., каждое на отдельной строке.
"""
# n = "abcdefghijklmnop"
# for i in range(0,len(n), 2):
#     print(n[i])
"""
В столбик 2
На вход программе подается одна строка. Напишите программу, которая выводит в столбик элементы строки в обратном порядке.
Формат входных данных
На вход программе подается одна строка.
Формат выходных данных
Программа должна вывести в столбик элементы строки в обратном порядке. 
"""
# n = "abc"
# for i in range(len(n)-1,-1,-1):
#     print(n[i])
#
"""
ФИО
На вход программе подаются три строки: имя, фамилия и отчество. Напишите программу, которая выводит инициалы человека.
Формат входных данных
На вход программе подаются три строки, каждая на отдельной строке.
Формат выходных данных
Программа должна вывести ФИО человека.
Примечание. Гарантируется, что имя, фамилия и отчество начинаются с заглавной буквы.
"""
# n = [input() for i in range(3)]
# # n=["Jopa","Hui","Pizda"]
# print(n[1][0],n[0][0],n[2][0],)
"""
Цифра 1
На вход программе подается одна строка состоящая из цифр. Напишите программу, которая считает сумму цифр данной строки.
Формат входных данных
На вход программе подается одна строка состоящая из цифр.
Формат выходных данных
Программа должна вывести сумму цифр данной строки.
Sample Input:
2514
Sample Output:
12
"""
# n = input()
# s = 0
# for i in range(len(list(n))):
#     s+=int(n[i])
# print(s)
"""
Цифра 2
На вход программе подается одна строка. Напишите программу, которая выводит сообщение «Цифра» (без кавычек), если строка содержит цифру. В противном случае вывести сообщение «Цифр нет» (без кавычек).
Формат входных данных
На вход программе подается одна строка.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
"""
# n = input()
# n = "Hi Python"
# x = False
# for i in range(len(n)):
#     if n[i] in "1234567890":
#         x = True
# if x == True:
#     print("Цифра")
# else:
#     print("Цифр нет")
"""
Сколько раз?
На вход программе подается одна строка. Напишите программу, которая определяет сколько раз в строке встречаются символы + и *.
Формат входных данных
На вход программе подается одна строка.
Формат выходных данных
Программа должна вывести сколько раз встречаются символы  + и * в строке.
Тестовые данные 🟢
Sample Input:
bcd+a++++**31415
Sample Output:
Символ + встречается 5 раз
Символ * встречается 2 раз
"""
# n = "bcd+a++++**31415"
# plus = 0
# star = 0
# for i in range(len(n)):
#     if n[i]=="*":
#         star +=1
#     elif n[i]=="+":
#         plus+=1
# print("Символ + встречается {} раз\nСимвол * встречается {} раз".format(plus,star))
#
"""
Одинаковые соседи
На вход программе подается одна строка. Напишите программу, которая определяет сколько в ней одинаковых соседних символов.
Формат входных данных
На вход программе подается одна строка.
Формат выходных данных
Программа должна вывести количество одинаковых соседних символов.
Sample Input 1:
abcd
Sample Output 1:
0
Sample Input 2:
aabbcc
Sample Output 2:
3
"""
# n = "aabbcc"
# c = 0
# for i in range(len(n)-1):
#     if n[i]==n[i+1]:
#         c+=1
# print(c)

"""
Гласные и согласные
На вход программе подается одна строка с буквами русского языка. Напишите программу, которая определяет количество гласных и согласных букв.
Формат входных данных
На вход программе подается одна строка.
Формат выходных данных
Программа должна вывести количество гласных и согласных букв.
Примечание. В русском языке 10 гласных букв (а, у, о, ы, и, э, я, ю, ё, е) и 21 согласная буква (б, в, г, д, ж, з, й, к, л, м, н, п, р, с, т, ф, х, ц, ч, ш, щ).
Тестовые данные 🟢
Sample Input:
Вдохновение – это умение приводить себя в рабочее состояние!
Sample Output:
Количество гласных букв равно 25
Количество согласных букв равно 24
"""
# n = "Вдохновение – это умение приводить себя в рабочее состояние!"
# glasn = "а, у, о, ы, и, э, я, ю, ё, е"
# glasn =glasn.replace(", ","")+glasn.upper().replace(", ","")
# sogl = "б, в, г, д, ж, з, й, к, л, м, н, п, р, с, т, ф, х, ц, ч, ш, щ"
# sogl = sogl.replace(", ","")+sogl.upper().replace(", ","")
# g = 0
# s = 0
# for i in n:
#     for j in glasn:
#         if i==j:
#             g+=1
#     for d in sogl:
#         if i==d:
#             s+=1
# print(f"Количество гласных букв равно {g}\nКоличество согласных букв равно {s}")
"""
Decimal to Binary
На вход программе подается натуральное число, записанное в десятичной системе счисления. Напишите программу, которая переводит данное число в двоичную систему счисления.
Формат входных данных
На вход программе подается одно натуральное число.
Формат выходных данных
Программа должна вывести число записанное в двоичной системе счисления.
Тестовые данные 🟢
Sample Input 1:
5
Sample Output 1:
101
Sample Input 2:
128
Sample Output 2:
10000000
"""
#
# n = 10
# b = ''
# while n>0:
#     b = str(n%2) + b
#     n = n // 2
# print(b)
#
# print(str(bin(int(input())))[2:])
"""
Делаем срезы 1
На вход программе подается одна строка. Напишите программу, которая выводит:

общее количество символов в строке;
исходную строку повторенную 3 раза;
первый символ строки;
первые три символа строки;
последние три символа строки;
строку в обратном порядке;
строку с удаленным первым и последним символом.
"""
# n = input()
# print(len(n))
# print(n*3)
# print(n[0])
# print(n[:3])
# print(n[-3:])
# print(n[::-1])
# print(n[1:-1])
"""
Делаем срезы 2
На вход программе подается одна строка. Напишите программу, которая выводит:

1 третий символ этой строки;
2 предпоследний символ этой строки;
3 первые пять символов этой строки;
4 всю строку, кроме последних двух символов;
5 все символы с четными индексами;
6 все символы с нечетными индексами;
7 все символы в обратном порядке;
8 все символы строки через один в обратном порядке, начиная с последнего
"""
# n = "abcdefghijklmnopqrstuvwxyz"
# print("1",n[2])
# print("2",n[-2:-1:])
# print("3",n[:5])
# print("4",n[:-2:])
# print("5",n[::2])
# print("6",n[1::2])
# print("7",n[::-1])
# print("8",n[::-2])
"""
Две половинки
На вход программе подается строка текста. Напишите программу, которая разрежет ее на две равные части, переставит их местами и выведет на экран.
Формат входных данных
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Примечание. Если длина строки нечетная, то длина первой части должна быть на один символ больше.
Тестовые данные 🟢

"""
# n = "abcdefg"
# c = int(len(n)/2)
# if len(n)%2==0:
#     print(n[c::],n[:c:],sep="")
# else:
#     print(n[c+1::],n[:c+1:],sep="")

"""
Заглавные буквы
На вход программе подается строка состоящая из имени и фамилии человека, разделенных одним пробелом. Напишите программу, которая проверяет, что имя и фамилия начинаются с заглавной буквы.
Формат входных данных 
На вход программе подается строка.
Формат выходных данных
Программа должна вывести «YES» если имя и фамилия начинаются с заглавной буквы и «NO» в противном случае.
Примечание. Строка содержит только буквы. 
"""

# n = "chris alan"
# t = n.title()
# if n==t:
#     print("YES")
# else:
#     print("NO")
# #     best
# s = input()
# print(("NO", "YES")[s == s.title()])

"""
sWAP cASE
На вход программе подается строка. Напишите программу, которая меняет регистр символов, другими словами замените все строчные символы заглавными и наоборот.
Формат входных данных 
На вход программе подается строка.
Формат выходных данных
Программа должна вывести строку в соответствии с условием задачи.
"""
# print(str(input()).swapcase())

"""
Хороший оттенок
На вход программе подается строка текста. Напишите программу, которая определяет является ли оттенок текста хорошим или нет. Текст имеет хороший оттенок, если содержит подстроку «хорош» во всевозможных регистрах.
Формат входных данных 
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести «YES» если текст имеет хороший оттенок и «NO» в противном случае.
Примечание. Текст содержащий хорош, ХОРОШ, Хорош, хОРОШ и т.д. имеет хороший оттенок.
"""

# n = "оыралоывало ХОРОШвмсва выарлво83кг834"
# n = n.lower()
# if "хорош" in n:
#     print("hui")

"""
Нижний регистр
На вход программе подается строка. Напишите программу, которая подсчитывает количество буквенных символов в нижнем регистре.
Формат входных данных 
На вход программе подается строка.
Формат выходных данных
Программа должна вывести количество буквенных символов в нижнем регистре.
"""

# n = "gggggggg1212321ABDCEFCE"
# c = 0
# for i in range(len(n)):
#     if "a" <= n[i] <= "z":  #!!!!
#         c += 1
# print(c)


"""
                                                                                        Поиск и замена
Методы поиска и замены строк внутри других строк.

Каждый метод в этой группе поддерживает необязательные аргументы <start> и <end>. Как и в строковых срезах действие метода ограничено частью исходной строки, начинающейся с позиции символа <start> и продолжающейся вплоть до позиции символа <end>, но не включающей ее. Если параметр <start> указан, а параметр <end> нет, то метод применяется к части исходной строки от <start> до конца строки. Если параметры не заданы, то подразумевается, что <start> = 0 , <end> = len(s).

Метод count()
Метод count(<sub>, <start>, <end>) считает количество непересекающихся вхождений подстроки <sub> в исходную строку s.

Результатом выполнения следующего кода:
"""
# s = 'foo goo moo'
# print(s.count('oo'))
# print(s.count('oo', 0, 8))  # подсчет с 0 по 7 символ
# будет:
# 3
# 2
"""""
Метод startswith()
Метод startswith(<suffix>, <start>, <end>) определяет начинается ли исходная строка s подстрокой <suffix>. Если исходная строка начинается с подстроки <suffix>,метод возвращает значение True, а если нет, то  False.
Результатом выполнения следующего кода:
"""""
# s = 'foobar'
# print(s.startswith('foo'))
# print(s.startswith('baz'))
# будет:
#
# True
# False
"""
Метод endswith()
Метод endswith(<suffix>, <start>, <end>) определяет оканчивается ли исходная строка s подстрокой <suffix>. Метод возвращает значение True если исходная строка оканчивается на подстроку <suffix> и False в противном случае.

Результатом выполнения следующего кода:
"""
# s = 'foobar'
# print(s.endswith('bar'))
# print(s.endswith('baz'))
# будет:
#
# True
# False
"""
Методы find(), rfind()
Метод find(<sub>, <start>, <end>) находит индекс первого вхождения подстроки <sub> в исходной строке s. Если строка s не содержит подстроки <sub>, то метод возвращает значение -1. Мы можем использовать данный метод наравне с оператором in для проверки: содержит ли заданная строка некоторую подстроку или нет.
"""
# Результатом выполнения следующего кода:
#
# s = 'foo bar foo baz foo qux'
# print(s.find('foo'))
# print(s.find('bar'))
# print(s.find('qu'))
# print(s.find('python'))
# будет:
#
# 0
# 4
# 20
# -1

"""
Метод rfind(<sub>, <start>, <end>) идентичен методу find(<sub>, <start>, <end>), за тем исключением, что он ищет первое вхождение подстроки <sub> начиная с конца строки s.

Методы index(), rindex()
Метод index(<sub>, <start>, <end>) идентичен методу find(<sub>, <start>, <end>), за тем исключением, что он вызывает ошибку  ValueError: substring not found во время выполнения программы, если подстрока <sub> не найдена.

Метод rindex(<sub>, <start>, <end>) идентичен методу index(<sub>, <start>, <end>), за тем исключением, что он ищет первое вхождение подстроки <sub> начиная с конца строки s.

Методы find() и rfind() являются более безопасными чем index() и rindex(), так как не приводят к возникновению ошибки во время выполнения программы.
"""

"""
Метод strip()
Метод strip() возвращает копию строки s у которой удалены все пробелы стоящие в начале и конце строки.
"""
# Результатом выполнения следующего кода:
#
# s = '     foo bar foo baz foo qux      '
# print(s.strip())
# будет:
# foo bar foo baz foo qux

"""
Метод lstrip()
Метод lstrip() возвращает копию строки s у которой удалены все пробелы стоящие в начале строки.
"""
# Результатом выполнения следующего кода:
#
# s = '     foo bar foo baz foo qux      '
# print(s.lstrip())
# будет:
#
# foo bar foo baz foo qux⎵ ⎵ ⎵ ⎵ ⎵ ⎵
"""
Метод rstrip()
Метод rstrip() возвращает копию строки s у которой удалены все пробелы стоящие в конце строки.
"""
# Результатом выполнения следующего кода:
#
# s = '      foo bar foo baz foo qux      '
# print(s.rstrip())
# будет:
#
# ⎵ ⎵ ⎵ ⎵ ⎵ ⎵foo bar foo baz foo qux
#
"""
Методы strip(), lstrip(), rstrip() могут принимать на вход опциональный аргумент<chars>. Необязательный аргумент <chars>– это строка, которая определяет набор символов для удаления.

Метод replace()
Метод replace(<old>, <new>) возвращает копию s со всеми вхождениями подстроки <old>, замененными на <new>.
"""
# Результатом выполнения следующего кода:
#
# s = 'foo bar foo baz foo qux'
# print(s.replace('foo', 'grault'))
# будет:
#
# grault bar grault baz grault qux
"""
Метод replace() может принимать опциональный третий аргумент <count>,  который определяет количество замен.
"""
# Результатом выполнения следующего кода:
#
# s = 'foo bar foo baz foo qux'
# print(s.replace('foo', 'grault', 2))
# будет:
#
# grault bar grault baz foo qux

"""
Количество слов
На вход программе подается строка текста, состоящая из слов, разделенных ровно одним пробелом. Напишите программу, которая подсчитывает количество слов в ней.

Формат входных данных 
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести количество слов.

Примечание 1. Строка текста не содержит пробелов в начале и конце.
Примечание 2. Используйте для решения задачи метод count.
"""
# n = input()
# print(n.count(" ")+1)

"""
Минутка генетики
На вход программе подается строка генетического кода, 
состоящая из букв А (аденин), Г (гуанин), Ц (цитозин), Т (тимин). 
Напишите программу, которая подсчитывает сколько аденина, гуанина, цитозина и тимина входит в данную строку генетического кода.
Формат входных данных 
На вход программе подается строка генетического кода, состоящая из символов А, Г, Ц, Т, а, г, ц, т.

Формат выходных данных
Программа должна вывести сколько гуанина, тимина, цитозина, аденина входит в данную строку генетического кода.

Примечание. Строка не содержит символов, кроме как А, Г, Ц, Т, а, г, ц, т.

Тестовые данные 🟢
Sample Input 1:
АааГГЦЦцТТттт
Sample Output 1:

Аденин: 3
Гуанин: 2
Цитозин: 3
Тимин: 5
"""
# n = "АааГГЦЦцТТттт"
# n = n.lower()
# def decrypt(code):
#     print("Аденин: {}\nГуанин: {}\nЦитозин: {}\nТимин: {}\n".format(n.count('а'),n.count('г'),n.count('ц'),n.count('т')))
# decrypt(n)

"""
Очень странные дела
Джим Хоппер с помощью радиоприемника пытается получить сообщение Оди. 
На приемник ему поступает nn различных последовательностей кода Морзе. 
Декодировав их, он получает последовательности из цифр и строчного латинского алфавита, 
при этом во всех сообщениях Оди содержится число 11, причем минимум 3 раза. 
Помогите определить Джиму количество сообщений от Оди.
Формат входных данных
В первой строке подаётся число nn – количество сообщений, 
в последующих nn строках вводятся строки, содержащие латинские строчные буквы и цифры.

Формат выходных данных
Программа должна вывести количество строк в которых содержится число 11 минимум 3 раза.

Примечание: Числа 11 необязательно должны быть разделены другими символами, 
нужно подсчитать вхождение последовательности символов "11", т.е. 
например в строке "111" содержится одна такая последовательность, в то время как в "1111" их уже две.
"""
# n = 3
# st = ["erforfjerjogrierg","111111111111111111111111111111111111111111111111111111111111111111","vk"]
# st = []
# c = 0
# for i in range(n):
#     st.append(str(input()))
# for j in st:
#     if j.count('11')>=3:
#         c+=1
# print(c)

"""
Количество цифр

На вход программе подается строка текста. Напишите программу, которая подсчитывает количество цифр в данной строке.
Формат входных данных 
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести количество цифр в данной строке.
Тестовые данные 🟢
Sample Input 1:
nezabud dl-6
Sample Output 1:
1
"""

# n = "1029384756aaa1234567890"
# c = 0
# for i in range(len(n)):
#     if n[i].isdigit()==True:
#         c+=1
# print(c)
#                  BEST
# print(sum(i.isdigit() for i in input()))
# print(len([i for i in input() if i.isdigit()]))

"""
.com or .ru

На вход программе подается строка текста. Напишите программу, которая проверяет, что строка заканчивается подстрокой .com или .ru.
Формат входных данных 
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести «YES» если введенная строка заканчивается подстрокой .com или .ru и «NO» в противном случае.

Тестовые данные 🟢
Sample Input 1:

www.stepik.org
Sample Output 1:

NO
"""
# n = "www.stepik.org"
# print("YES" if n.endswith(".com") or n.endswith(".ru") else "NO")

"""
Самый частотный символ
На вход программе подается строка текста. Напишите программу, которая выводит на экран символ, который появляется наиболее часто.

Формат входных данных 
На вход программе подается строка текста. Текст может содержать строчные и заглавные буквы английского и русского алфавита, а также цифры.

Формат выходных данных
Программа должна вывести символ, который появляется наиболее часто.

Примечание 1. Если таких символов несколько, следует вывести последний по порядку символ.
Примечание 2. Следует различать заглавные и строчные буквы, а также буквы русского и английского алфавита.

Тестовые данные 🟢
Sample Input 1:
aaaabbc
Sample Output 1:
a
"""
# n = "aaaaabbbbbc"
# max=0
# c = 0
# for i in n:
#     if n.count(i)>=max:
#         max = n.count(i)
#         c = i
# print(c,end="")

"""
Первое и последнее вхождение
На вход программе подается строка текста. Если в этой строке буква «f» встречается только один раз, выведите её индекс. 
Если она встречается два и более раз, выведите индекс её первого и последнего вхождения на одной строке, разделенных символом пробела. Если буква «f» в данной строке не встречается, следует вывести «NO».

Формат входных данных 
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Тестовые данные 🟢
Sample Input 1:
abcdefg
Sample Output 1:
5
"""
# n = "abcd"
# if n.count("f")>=2:
#     print(n.find('f'),end=" ")
#     print(n.rfind('f'))
# elif n.count("f")==1:
#     print(n.index("f"))
# else:
#     print("NO")

"""
Удаление фрагмента
На вход программе подается строка текста, в которой буква «h» встречается минимум два раза. 
Напишите программу, которая удаляет из этой строки первое и последнее вхождение буквы «h», а также все символы, находящиеся между ними.
Формат входных данных 
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Тестовые данные 🟢
Sample Input 1:
ahahahahaha
Sample Output 1:
aa
"""
# n = "hh"
# print(n[:n.find('h'):],n[n.rfind('h')+1::],sep="")


s = 'In {0}, someone paid {1} {2} for two pizzas.'
a, b, c = 2010,"10k","Bitcoin"
print(s.format(a,b,c))
